MI Voters - 100 and over
https://docs.google.com/document/d/1cbPPa-cpMa6qG6207d0S67_TrOhChg6vVUcApGe_n7M/edit

@john.putz
First Export. Approved by James and Aby Yusuf
Dev Name: Dmitry S.
Story type Name: #1112 MI Voters - 100 and over
FCD:
Sample story:
Period: Once
Total Count:
Max Project Count by client:
MB -
MM -
_____________________________________________________

STAGE TABLE DEFINITION
insert into stage_definition_configurations (tbl, definition) select 'mi_voters_100_over_staging','{"city":"varchar(100)","zip":"varchar(10)","main_count":"varchar(10)","oldest":"varchar(256)","count_more_105":"varchar(100)","oldest_by_state":"varchar(256)","oldest_than":"varchar(100)","story_table":"longtext"}';


#909

STAGE TABLE CREATION
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_definition' --task='create_tbl' --config_id=909 -t

STAGE POPULATION CONFIGURATION
insert into stage_population_configurations(project_name, tbl, definition) select 'MI Voters - 100 and over', 'mi_voters_100_over_staging', '{"known_entities":{"project_name":"MI Voters - 100 and over"},"resources":{":root":{"host":"db02","db":"loki_storycreator","tbl":"sort_by_once","identifier":"id","mapping":{}}},"stage_derivations":{"source_id":{"method":"as_int","arguments":{"raw_field":"id"}},"staging":{"stage_fields":["EMPTYSET"],"method":"hle_s1112_mi_voters_100_over_population","arguments":{}}}}';

population_config_id: #1011

STAGE POPULATION:
$ cd ~/Loki/procedures
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=1011 -t --slack_id=UKYAGBYC9


STORY CREATOR CONFIGURATION:
insert into storycreator_configurations (tbl, template, extension, export_arguments) select 'mi_voters_100_over_staging', 'hle_s1112_mi_voters_100_over_creation', 'stories', 'where (story_created != 1 or story_created is null) and publication_name is not null and publication_name != ""';

creation_config_id: #892

STORY CREATION COMMAND:
bundle exec ruby Loki.rb :hle@hle_router --switch='story_creation' --config_id=892 -t --slack_id=UKYAGBYC9


STAGING: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=892 --population_config_id=1011 --story_section_ids=2 --story_tag_ids=3 --photobuckets='Vote' --job_item_name_description='MI Voters - 100 and over' -t --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=892 --population_config_id=1011 --story_section_ids=16 --story_tag_ids=126 --photobuckets='Vote' --job_item_name_description='MI Voters - 100 and over' -t --where="stage.client_name like 'MM - %'"

STAGING: EXPORT STORIES
bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' -t -creator='Dmitry Suschinsky' --stage_tbl_org --config_ids= --slack_id=UKYAGBYC9 --threads_count=15



FIRST FEEDBACK
________________________________________
irb ->
load 'Loki.rb'
Hle::Story::Feedback.stories_feedback('511701546,511701553,511701552')

bundle exec ruby Loki.rb :hle_tools@stories_feedback -t --story_pl_ids=511747892,511747891,511747887


!!!!!!!!!!!!!!FCD!!!!!!!!!!!!!!!!!!!!
________________________________________________________________________________________________________________________________________

SCHEDULER:
__________
population_config_id: #1011
creation_config_id: #892

tbl: mi_voters_100_over_staging
desc: MI Voters - 100 and over

config_id - population_config_id

1112 - 10/20/Oct. 9
bundle exec ruby Loki.rb :hle@hle_scheduler -t --config_id=1011 --limit=10 --start_date='2020-10-09' --total_days_till_end_date=20

__________________________________________________
чтоб проверить шедулер, что он "окейно" отработал:

select publication_name, min(publish_on), max(publish_on), count(*) from 'mi_voters_100_over_staging' group by publication_name;

______________________________________
PRODUCTION: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’
______________________________________

--where="client_name like 'MM - %'"

РАЗБИВКА ПО КЛИНЕТАМ!!!
LGIS + MB
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=892 --population_config_id=1011 --story_section_ids=2 --story_tag_ids=126 --photobuckets='Economy' --job_item_name_description='MI Voters - 100 and over' -t --prod --limit_config=1 --where="client_id = 91"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=892 --population_config_id=1011 --story_section_ids=16 --story_tag_ids=3 --photobuckets='Economy' --job_item_name_description='MI Voters - 100 and over' -t --prod --limit_config=1 --where="client_id = 120"

______________________________________

select * from story_export_configurations_v2 where tbl = 'mi_voters_100_over_staging' and export_name like '%production%' order by id DESC;

______________________________________
если все ок, то выполняем без --limit_config=1

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=892 --population_config_id=1011 --story_section_ids=2 --story_tag_ids=126 --photobuckets='Economy' --job_item_name_description='MI Voters - 100 and over' -t --prod --where="client_id = 91"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=892 --population_config_id=1011 --story_section_ids=16 --story_tag_ids=3 --photobuckets='Economy' --job_item_name_description='MI Voters - 100 and over' -t --prod --where="client_id = 120"
_________
повторяем

select * from story_export_configurations_v2 where tbl = 'mi_voters_100_over_staging' and export_name like '%production%' order by id DESC;


______________________
для построения таблицы
______________________

select s.client_name, s.publication_name, s.publication_id as project_id, ec.id as config_id, s.max_publish_on, s.total_stories from (select client_name, publication_name, publication_id, max(publish_on) as max_publish_on, count(*) as total_stories from mi_voters_100_over_staging group by publication_name) s join (select * from story_export_configurations_v2 where tbl ='mi_voters_100_over_staging' and export_name like '%production%') ec on ec.community_id = s.publication_id order by s.publication_name;


__________________________
PRODUCTION: EXPORT STORIES
__________________________

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='376309'

_____
IF OK
_____

--threads_count=7 | 13140961 | 131401011

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='376309,376326,376305,376308,376302,376314,376316,376296,376297,376324,376317,376327,376315,376298,376321,376322,376295,376328,376318,376306,376300,376310,376304,376313,376325,376301,376303,376299,376319,376312,376323,376311,376320,376307' --threads_count=10 --slack_id=UKYAGBYC9
___________________________


ФИНАЛЬНАЯ ТАБЛИЦА ДЛЯ ДЖОНА
___________________________

SELECT CONVERT(GROUP_CONCAT(job_item_id SEPARATOR ',') USING utf8)
FROM story_export_configurations_v2
WHERE tbl = 'mi_voters_100_over_staging' AND
      export_name LIKE '%production%';

# pipeline-core-replica2.jnswire_prod query:

SELECT headline, c.name AS publication, concat('https://pipeline.locallabs.com/stories/', s.id) AS url,
       published_at, ji.name AS job_item, cc.name AS client
FROM stories AS s
JOIN communities AS c
  ON s.community_id = c.id
JOIN client_companies AS cc
  ON c.client_company_id = cc.id
JOIN data_entry_leads AS l
  ON l.id = s.lead_id
JOIN job_items AS ji
  ON l.job_item_id=ji.id
WHERE published_at >= '2020-07-29' AND
      deleted = 0 AND
      l.job_item_id IN (...)
ORDER BY c.name;




REMINDER TOOL
___________________________

INSERT INTO loki_storycreator.hle_reminders
    (
        hle_assignments_number, story_type_name, story_type_stage_table,
        dev_name, slack_handle, dev_email,
        story_frequency, reminders_on, manual_export_required, reminder_frequency, reminder_message,
        last_manual_export, manual_export_blocked, on_cron, warnings_on, warning_count_min, warning_frequency, warning_fix_blocked,
        data_source_checker_on, data_source_host, data_source_db, data_source_update_query
    )
VALUES
    (
        1112, 'MI Voters - 100 and over', 'mi_voters_100_over_staging',
        'Dmitiry Suschinsky', '@dmitiry.suschinsky', 'dsuschinsky@gmail.com',
        'year', 1, 1, 'annually', 'The Dataset located on db06.voters_2016.census_details%',
        '2020-07-11', 0, 0, 0, 20000, 'annually', 0,
         1, 'db06','voters_2016', 'select date(max(postedTime)) date from usa_raw.census_details;'
    );



# Creator: Dmitry Suschinsky
# Story type: MI Voters - 100 and over
# Template: https://docs.google.com/document/d/1Uf5x55p10-JcqGOAvRxAxkcJskfEw7EUbkNE-bTWxHM/edit
# Created: November 2020

# tbl: mi_voters_100_over_staging
# db01.usa_raw.national_rent_report_by_county
# branch: s1112_mi_voters_100_over_d_sushi
# s1112_mi_voters_100_over.rb

def s1112_mi_voters_100_over_stage_population(line, arguments)
  counter     = 0
  mb_id       = 120
  mm          = 'Michigan'
  environment = 'production'
  records = source_query

  records.each_with_index do |rec, rec_num|
    print '| org_id: '
    print "#{rec[:org_id]} ".green
    print '| county: '
    print "#{rec[:city]} ".green
    print '| rec: '
    print "#{rec} ".green

    next unless rec

    # Metro Business Network
    # MM-Michigan
    mm_pubs = Hle::Publications.mm_pubs_excluding_states(rec[:org_id], environment, mm)
    mb_pubs = get_journal_from_org_id(rec[:org_id], environment, mb_id)
    publications = mb_pubs + mm_pubs
    publications.each_with_index do |publication, pub_num|
      publication.transform_keys!(&:to_sym)
      puts "#{rec_num * publications.size + pub_num + 1}/#{records.size * publications.size}".yellow

      host = Route_noprefix.new(host: DB02, stage_db: 'loki_storycreator')
      h    = {}

      h['organization_id']           = rec[:org_id]
      h['publication_id']            = publication[:id].to_i
      h['publication_name']          = publication[:publication_name]
      h['client_id']                 = publication[:client_id]
      h['client_name']               = publication[:client_name]
      h['source_table_id']           = 22961

      h['city']                      = rec[:city]
      h['zip']                       = rec[:zip]
      h['main_count']                = rec[:main_count]
      h['oldest']                    = rec[:oldest]
      h['count_more_105']            = rec[:count_more_105]
      h['oldest_by_state']           = rec[:oldest_by_state]
      h['oldest_than']               = rec[:oldest_than]
      h['story_table']               = rec[:table].to_json

      h.transform_keys!(&:to_s)
      rules = insert_ignore_rules(h.escaped)
      query = "INSERT IGNORE INTO #{host.stage_db}.#{@config['target_table']}#{rules}"

      host.client.query(query)
      host.client.close
      counter += 1
    end
  end

  puts "Source size: #{records.length}"
  puts "Counter:     #{counter}"

  'INVALID' # a very important string!!!
end

def s1112_mi_voters_100_over_stage_creation(options)
  count = @stage_selection.count
  @stage_selection.each_with_index do |stage, i|
    print "\n PROCESSING #{i+1}/#{count}\n"

    table    = StoryTable.new.from_json(stage['story_table']).to_html

    zip               = stage['zip']
    main_count        = stage['main_count'].to_i
    oldest_name       = stage['oldest'][0...-4]
    oldest_age        = stage['oldest'][/\d+/].to_i

    count_more_105    = stage['count_more_105'].to_i

    oldest_by_state_name  = stage['oldest_by_state'][0...-4]
    oldest_by_state_age   = stage['oldest_by_state'][/\d+/].to_i

    oldest_than       = stage['oldest_than'].to_i
    voters            = main_count == 1 ? 'voter' : 'voters'
    is_are            = main_count == 1 ? 'is' : 'are'

    url_1 = "https://www.asaging.org/blog/global-look-oldest-old-and-centenarians-it-genes-diet-luck-or-all-combined"
    url_2 = "http://supercentenarian-research-foundation.org/TableE.aspx"

    if count_more_105 > 1 && count_more_105 > 0
      second_sentence = "The oldest of these voters, #{oldest_name}, is #{oldest_age} years old. There are #{Numbers.num_to_words(count_more_105)} registered voters over the age of 105 in the zip code. According to the #{"American Society on Aging".to_link(url_1)}, there are an estimated 80,000 centenarians in the United States."
    elsif count_more_105 > 1 && count_more_105 < 1
      second_sentence = "The oldest of these voters, #{oldest_name}, is #{oldest_age} years old. According to the #{"American Society on Aging".to_link(url_1)}, there are an estimated 80,000 centenarians in the United States."
    else
      second_sentence = "According to the #{"American Society on Aging".to_link(url_1)}, there are an estimated 80,000 centenarians in the United States."
    end

    export = {}
    export['headline'] = <<~HEADER.squeeze(' ').chomp
      #{main_count} #{voters} in zip code #{zip} #{is_are} over 100 years old
    HEADER
    export['teaser'] = <<~TEASER.squeeze(' ').chomp
      In zip code #{zip}, there #{is_are} #{Numbers.num_to_words(main_count)} #{voters} over the age of 100, according to the Michigan Secretary of State.
    TEASER
    output = <<~BODY.squeeze(' ').chomp
      In zip code #{zip}, there #{is_are} #{Numbers.num_to_words(main_count)} #{voters} over the age of 100, according to the Michigan Secretary of State.
      #{second_sentence}
      Statewide, the oldest voter is #{oldest_by_state_name} at #{oldest_by_state_age} years old. There are #{Numbers.numbers_add_commas(oldest_than)} individuals on Michigan voter rolls who are currently listed as born before the oldest living person in the United States, Hester Ford. Ford was born August 15, 1905, according to the #{"Supercentenarian Research Foundation".to_link(url_2)}. This could indicate that the state's voter registration data is outdated or that deceased voters are not being removed from the registry and someone is voting in their name.
      #{"Voters over the age of 100 in zip code #{zip}".to_table_title}#{table}
    BODY
    prepare_output(stage, output, export, options)
  end
end

def source_query
  counter     = 0

  db14 = Route_noprefix.new(host: DB14, raw_db: 'voters_mi_stage')
  db14.client.query('use voters_mi_stage;')

  query = <<~SQL
    select a.zip, a.city from voters_mi_stage.voters v
    join voters_mi_stage.addresses a on v.voter_id = a.voter_id
    WHERE v.BirthDate <= '1920-11-05' and v.BirthDate > '0000-00-00'
    GROUP BY a.zip;
  SQL

  source_1 = db14.client.query(query).to_a

  records = []
  source_1.each do |el|
    get_org_id_by_county(el['city']).each do |org|
      oldest = get_oldest(el['zip'])
      oldest_by_state = get_oldest_by_state[0]
      record = {
          city: el['city'], zip: el['zip'], main_count: get_count_by_zip(el['zip'])['count'], oldest: oldest[0]['name'] + '/' + (Time.now.year.to_i - Date.parse("#{oldest[0]['birthDate']}").strftime("%Y").to_i).to_s,
          count_more_105: get_count_more_105(el['zip'])['count'], oldest_by_state: oldest_by_state['name'] + '/' + (Time.now.year.to_i - Date.parse("#{oldest_by_state['birthDate']}").strftime("%Y").to_i).to_s, oldest_than: get_oldest_than['count'], org_id: org['org_id'],
          table: get_table(oldest)
      }
      records << record
      counter += 1
      print 'record: '
      print "#{counter} ".green
    end
  end
  db14.client.close

  records
end

def get_table(result)
  table = StoryTable.new
  table.header = ['Name', 'Address', 'Birthdate', 'Voter ID']
  table.content = []

  result.each do |row|
    table.content << [
        row['name'], Address.abbreviated_streets(row['address']), row['birthDate'], row['voter_id']
    ]
  end
  table
end

def get_count_by_zip(zip)
  db14 = Route_noprefix.new(host: DB14, raw_db: 'voters_mi_stage')
  db14.client.query('use voters_mi_stage;')

  query = <<~SQL
    select COUNT(v.id) AS count from voters_mi_stage.voters v
    join voters_mi_stage.addresses a on v.voter_id = a.voter_id
    WHERE v.BirthDate <= '1920-11-05' and v.BirthDate > '0000-00-00' AND a.zip = "#{zip}";
  SQL

  db14.client.query(query).to_a[0]
end

def get_oldest(zip)
  db14_1 = Route_noprefix.new(host: DB14, raw_db: 'voters_mi_stage')
  db14_1.client.query('use voters_mi_stage;')

  query = <<~SQL
    select CONCAT(v.FirstName, ' ', v.MiddleName, ' ', v.LastName) as name, a.address, v.BirthDate as birthDate, v.voter_id from voters_mi_stage.voters v
    join voters_mi_stage.addresses a on v.voter_id = a.voter_id
    WHERE v.BirthDate <= '1920-11-05' and v.BirthDate > '0000-00-00' AND a.zip = "#{zip}"
    ORDER BY v.BirthDate;
  SQL

  source = db14_1.client.query(query).to_a
  db14_1.client.close
  source
end

def get_oldest_by_state
  db14_2 = Route_noprefix.new(host: DB14, raw_db: 'voters_mi_stage')
  db14_2.client.query('use voters_mi_stage;')

  query = <<~SQL
    select CONCAT(v.FirstName, ' ', v.MiddleName, ' ', v.LastName) as name, v.BirthDate as birthDate from voters_mi_stage.voters v
    WHERE v.BirthDate <= '1920-11-05' and v.BirthDate > '0000-00-00'
    ORDER BY v.BirthDate
    LIMIT 1;
  SQL

  source = db14_2.client.query(query).to_a
  db14_2.client.close
  source
end

def get_count_more_105(zip)
  db14_3 = Route_noprefix.new(host: DB14, raw_db: 'voters_mi_stage')
  db14_3.client.query('use voters_mi_stage;')

  query = <<~SQL
    select COUNT(v.id) AS count from voters_mi_stage.voters v
    join voters_mi_stage.addresses a on v.voter_id = a.voter_id
    WHERE v.BirthDate <= '1915-11-05' and v.BirthDate > '0000-00-00' AND a.zip = "#{zip}";
  SQL

  source = db14_3.client.query(query).to_a[0]
  db14_3.client.close
  source
end

def get_oldest_than
  db14_4 = Route_noprefix.new(host: DB14, raw_db: 'voters_mi_stage')
  db14_4.client.query('use voters_mi_stage;')

  query = <<~SQL
    select COUNT(v.id) AS count from voters_mi_stage.voters v
    WHERE v.BirthDate <= '1905-08-14' and v.BirthDate > '0000-00-00';
  SQL

  source = db14_4.client.query(query).to_a[0]
  db14_4.client.close
  source
end

def get_org_id_by_county(city)
  db01 = Route_noprefix.new(host: DB01, raw_db: 'usa_raw')
  db01.client.query('use usa_raw;')

  query = <<~SQL
    SELECT pl_production_org_id AS org_id, place_name
    FROM usa_raw.usa_administrative_division_counties_places_matching
    WHERE short_name = "#{city}" AND state_name = 'Michigan' AND pl_production_org_id IS NOT NULL
    GROUP BY org_id;
  SQL

  source = db01.client.query(query).to_a
  db01.client.close
  source
end