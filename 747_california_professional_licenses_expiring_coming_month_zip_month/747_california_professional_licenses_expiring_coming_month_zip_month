California - Professional Licenses Expiring in the Coming Month (Zip - Month)
https://docs.google.com/document/d/1SWHB7e1dK6GW7FftfUyOXI80PLcEamTrxOVMDzVIsUE/edit#heading=h.gjdgxs

@john.putz
First Export. Approved by James and Kirkland
Dev Name: Dmitry S.
Story type Name: #747 California - Professional Licenses Expiring in the Coming Month (Zip - Month)
FCD:
Sample story:
Period:
Total Count: 142
Max Project Count by client:
MB - 8
MM - 7
_____________________________________________________

STAGE TABLE DEFINITION
insert into stage_definition_configurations (tbl, definition) select 'ca_prof_lic_exp_coming_month_zip_m_staging','{"zip":"VARCHAR(128)","count":"int(10)","month":"int(2)","year":"int(4)","story_table":"LONGTEXT"}';


#785

STAGE TABLE CREATION
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_definition' --task='create_tbl' --config_id=785 -t

STAGE POPULATION CONFIGURATION
insert into stage_population_configurations(project_name, tbl, definition) select 'California - Professional Licenses Expiring in the Coming Month (Zip - Month)', 'ca_prof_lic_exp_coming_month_zip_m_staging', '{"known_entities":{"project_name":"California - Professional Licenses Expiring in the Coming Month (Zip - Month)"},"resources":{":root":{"host":"db02","db":"loki_storycreator","tbl":"sort_by_once","identifier":"id","mapping":{}}},"stage_derivations":{"source_id":{"method":"as_int","arguments":{"raw_field":"id"}},"staging":{"stage_fields":["EMPTYSET"],"method":"ca_prof_lic_exp_coming_month_zip_m_population","arguments":{}}}}';

population_config_id: #888

STAGE POPULATION:
$ cd ~/Loki/procedures
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=888 -t --month=8 --year=2020 --slack_id=UKYAGBYC9


STORY CREATOR CONFIGURATION:
insert into storycreator_configurations (tbl, template, extension, export_arguments) select 'ca_prof_lic_exp_coming_month_zip_m_staging', 'ca_prof_lic_exp_coming_month_zip_m_creation', 'stories', 'where (story_created != 1 or story_created is null) and publication_name is not null and publication_name != ""';

creation_config_id: #774

STORY CREATION COMMAND:
bundle exec ruby Loki.rb :hle@hle_router --switch='story_creation' --config_id=774 -t --slack_id=UKYAGBYC9


STAGING: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=774 --population_config_id=888 --story_section_ids=2 --story_tag_ids=3 --photobuckets='General Business - 1000x667' --job_item_name_description='California - Professional Licenses Expiring in the Coming Month (Zip - Month)' -t --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=774 --population_config_id=888 --story_section_ids=16 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='California - Professional Licenses Expiring in the Coming Month (Zip - Month)' -t --where="stage.client_name like 'MM - %'"

STAGING: EXPORT STORIES
bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' -t -creator='Dmitry Suschinsky' --stage_tbl_org --config_id=340619



FIRST FEEDBACK
________________________________________
irb ->
load 'Loki.rb'
Hle::Story::Feedback.stories_feedback('511701546,511701553,511701552')

bundle exec ruby Loki.rb :hle_tools@stories_feedback -t --story_pl_ids=511734856,511734855,511734857


!!!!!!!!!!!!!!FCD!!!!!!!!!!!!!!!!!!!!
________________________________________________________________________________________________________________________________________

SCHEDULER:
__________
population_config_id: #888
creation_config_id: #774

tbl: ca_prof_lic_exp_coming_month_zip_m_staging
desc: California - Professional Licenses Expiring in the Coming Month (Zip - Month)

config_id - population_config_id

5/10/September 21
bundle exec ruby Loki.rb :hle@hle_scheduler -t --config_id=888 --limit=5 --start_date='2020-09-21' --total_days_till_end_date=10

__________________________________________________
чтоб проверить шедулер, что он "окейно" отработал:

select publication_name, min(publish_on), max(publish_on), count(*) from 'ca_prof_lic_exp_coming_month_zip_m_staging' group by publication_name;

______________________________________
PRODUCTION: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’
______________________________________

--where="client_name like 'MM - %'"

РАЗБИВКА ПО КЛИНЕТАМ!!!

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=774 --population_config_id=888 --story_section_ids=2 --story_tag_ids=3 --photobuckets='General Business - 1000x667' --job_item_name_description='California - Professional Licenses Expiring in the Coming Month (Zip - Month)' -t --prod --limit_config=1 --where="client_id = 120"  --slack_id=UKYAGBYC9
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=774 --population_config_id=888 --story_section_ids=16 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='California - Professional Licenses Expiring in the Coming Month (Zip - Month)' -t --prod --limit_config=1 --where="stage.client_name like 'MM - %'"  --slack_id=UKYAGBYC9

______________________________________

select * from story_export_configurations_v2 where tbl = 'ca_prof_lic_exp_coming_month_zip_m_staging' and export_name like '%production%' order by id DESC;

______________________________________
если все ок, то выполняем без --limit_config=1

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=774 --population_config_id=888 --story_section_ids=2 --story_tag_ids=3 --photobuckets='General Business - 1000x667' --job_item_name_description='California - Professional Licenses Expiring in the Coming Month (Zip - Month)' -t --prod --where="client_id = 120" --slack_id=UKYAGBYC9
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=774 --population_config_id=888 --story_section_ids=16 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='California - Professional Licenses Expiring in the Coming Month (Zip - Month)' -t --prod --where="stage.client_name like 'MM - %'" --slack_id=UKYAGBYC9
_________
повторяем

select * from story_export_configurations_v2 where tbl = 'ca_prof_lic_exp_coming_month_zip_m_staging' and export_name like '%production%' order by id DESC;


______________________
для построения таблицы
______________________

select s.client_name, s.publication_name, s.publication_id as project_id, ec.id as config_id, s.max_publish_on, s.total_stories from (select client_name, publication_name, publication_id, max(publish_on) as max_publish_on, count(*) as total_stories from ca_prof_lic_exp_coming_month_zip_m_staging group by publication_name) s join (select * from story_export_configurations_v2 where tbl ='ca_prof_lic_exp_coming_month_zip_m_staging' and export_name like '%production%') ec on ec.community_id = s.publication_id order by s.publication_name;


__________________________
PRODUCTION: EXPORT STORIES
__________________________

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='357831' --slack_id=UKYAGBYC9

_____
IF OK
_____

--threads_count=7 | 13140961 | 13140960

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='357831,357789,357811,357814,357835,357791,357790,357816,357834,357793,357828,357812,357808,357825,357794,357830,357796,357829,357800,357813,357822,357833,357799,357820,357809,357801,357802,357792,357797,357821,357795,357798,357804,357807,357805,357819,357817,357810,357826,357815,357832,357823,357818,357806,357803,357824,357827' --threads_count=7 --slack_id=UKYAGBYC9
___________________________


ФИНАЛЬНАЯ ТАБЛИЦА ДЛЯ ДЖОНА
___________________________

SELECT CONVERT(GROUP_CONCAT(job_item_id SEPARATOR ',') USING utf8)
FROM story_export_configurations_v2
WHERE tbl = "ca_prof_lic_exp_coming_month_zip_m_staging" AND
      export_name LIKE '%production%';

# pipeline-core-replica2.jnswire_prod query:

SELECT headline, c.name AS publication, concat('https://pipeline.locallabs.com/stories/', s.id) AS url,
       published_at, ji.name AS job_item, cc.name AS client
FROM stories AS s
JOIN communities AS c
  ON s.community_id = c.id
JOIN client_companies AS cc
  ON c.client_company_id = cc.id
JOIN data_entry_leads AS l
  ON l.id = s.lead_id
JOIN job_items AS ji
  ON l.job_item_id=ji.id
WHERE published_at >= '2020-08-30' AND
      deleted = 0 AND
      l.job_item_id IN (211042,211044,211066,211079,211067,211086,211084,211071,211056,211075,211058,211068,211073,211065,211060,211063,211059,211061,211053,211045,211082,211088,211046,211072,211081,211076,211089,211043,211047,211083,211048,211057,211085,211077,211078,211070,211054,211062,211049,211064,211080,211069,211055,211074,211050,211051,211052)
ORDER BY c.name;




REMINDER TOOL
___________________________

INSERT INTO loki_storycreator.hle_reminders
    (
        hle_assignments_number, story_type_name, story_type_stage_table,
        dev_name, slack_handle, dev_email,
        story_frequency, reminders_on, manual_export_required, reminder_frequency, reminder_message,
        last_manual_export, manual_export_blocked, on_cron, warnings_on, warning_count_min, warning_frequency, warning_fix_blocked,
        data_source_checker_on, data_source_host, data_source_db, data_source_update_query
    )
VALUES
    (
        747, 'California - Professional Licenses Expiring in the Coming Month (Zip - Month)', 'ca_prof_lic_exp_coming_month_zip_m_staging',
        'Dmitiry Suschinsky', '@dmitiry.suschinsky', 'dsuschinsky@gmail.com',
        'year', 1, 1, 'yearly', 'The Dataset located on db01.usa_raw.california_professional_licensing_%',
        '2020-07-11', 0, 0, 0, 20000, 'yearly', 0,
         1, 'db1','usa_raw', 'select date(max(postedTime)) date from usa_raw.california_professional_licensing;'
    );



# Creator: Dmitry Suschinsky
# Story type: California - Professional Licenses Expiring in the Coming Month (Zip - Month)
# Template: https://docs.google.com/document/d/1VVOVqdsyilwIC5NZfjt6plqi1_1SS0lRmz7_iJxcrbY/edit?usp=sharing
# Created: July 2020

# tbl: ca_prof_lic_exp_coming_month_zip_m_staging
# db01.usa_raw.california_professional_licensing_%
# branch: s747_ca_prof_lic_exp_coming_month_zip_m_d_sushi
# s747_ca_prof_lic_exp_coming_month_zip_m.rb

def ca_prof_lic_exp_coming_month_zip_m_stage_population(line, arguments)
  require 'bigdecimal'
  require 'bigdecimal/util'
  require 'date'

  puts("\n!!!\nParameter required 'month' \n!!!\n") unless (@options['month'])
  return 'INVALID' unless @options['month']
  month = @options['month']

  puts("\n!!!\nParameter required 'year' \n!!!\n") unless (@options['year'])
  return 'INVALID' unless @options['year']
  year = @options['year']

  puts 'month: ', month
  puts 'year: ', year

  db02 = Route_noprefix.new(host: DB02, stage_db: 'loki_storycreator')
  db02.client.query("use #{db02.stage_db}")

  options = derive_options({})
  message = ''
  raise message if options['option'] == 'some_error'
  m_biz_id = 120
  location = 'California'
  environment = 'production'

  counter = 0
  dist_counter = 1

  db01 = Route_noprefix.new(host: DB01, stage_db: 'usa_raw')
  db01.client.query("use #{db01.stage_db}")

  zips = get_zips(db01)

  records = []
  zips.each do |zip|
    count = get_count(db01, zip['zip'], month, year)[0]['count'].to_i
    if count.to_i == 0
      next
    end

    pl_org_id = get_org_id_by_zip_and_state(db01, zip['zip'], 'California')[0]
    org_id = pl_org_id['org_id'] if pl_org_id.class != NilClass

    if org_id == 0 || org_id == nil && count != 0
      org_id = '645047731' # 645047731 for California state
    elsif org_id == 0 || org_id == nil
      next
    end

    records << {month_str: Date::MONTHNAMES[month.to_i], year: year, zip: zip['zip'], count: count, org_id: org_id}
    puts 'record: ', records.last
  end

  puts '########################'
  puts 'records count: ', records.count

  reasons = {
      publications: [],
      publication_name: []
  }

  records.each_with_index do |row, index|
    puts "#{index}/#{records.size} of #{dist_counter}. #{row['zip']}".yellow
    puts "PL Org ID: #{row[:org_id]}".green
    next if row[:org_id].nil?

    m_biz_pubs = get_journal_from_org_id(row[:org_id], environment, m_biz_id)
    m_biz_pubs = m_biz_pubs.delete_if { |p| !p['publication_name'].match?('California') }
    mm_st_pubs = Hle::Publications.mm_pubs_excluding_states(row[:org_id], environment, location)

    publications = mm_st_pubs + m_biz_pubs

    if publications.count.zero?
      reasons[:publications] << row[:zip]
      next
    end

    table_records = get_table_records(db01, row[:zip], month, year)
    puts 'table_records: ', table_records

    table = table_from_data(table_records)

    publications.each do |publication|
      h = {}

      h['organization_id'] = row[:org_id]
      h['publication_id'] = publication['id'].to_i
      h['publication_name'] = publication['publication_name']
      h['client_id'] = publication['client_id']
      h['client_name'] = publication['client_name']
      h['source_table_id'] = 21343

      h['month'] = month
      h['zip'] = row[:zip]
      h['count'] = row[:count]
      h['year'] = row[:year]
      h['story_table'] = table.to_json

      rules = insert_ignore_rules(h.escaped)
      query = "insert ignore into #{@config['target_table']}#{rules}"

      db02.client.query(query)
      counter += 1
    end
  end

  puts "Source size: #{source.size}"
  puts "Counter:     #{counter}"
  db02.client.close if db02
  db01.client.close if db01
  'INVALID' # a very important string!!!
end

def ca_prof_lic_exp_coming_month_zip_m_stage_creation(options)
  count = @stage_selection.count
  @stage_selection.each_with_index do |stage, i|
    print "\n PROCESSING #{i+1}/#{count}\n"

    zip = stage['zip']
    count_num = stage['count'].to_i
    count = Numbers.num_to_words(count_num)
    month = Date::MONTHNAMES[stage['month']]
    license_s = count_num == 1 ? 'license' : 'licenses'
    is_are = count_num == 1 ? 'is' : 'are'

    table = StoryTable.new.from_json(stage['story_table']).to_html

    url_1 = "https://search.dca.ca.gov/"

    export = {}
    export['headline'] = <<~HEADER.squeeze(' ').chomp
    #{count_num} professional #{license_s} #{is_are} set to expire in #{zip} during #{month}
    HEADER
    export['teaser'] = <<~TEASER.squeeze(' ').chomp
    There #{is_are} #{count} professional #{license_s} set to expire in zip code #{zip} during #{month}, according to California’s Department of Consumer Affairs.
    TEASER
    output = <<~BODY.squeeze(' ').chomp
    There #{is_are} #{count} professional #{license_s} set to expire in zip code #{zip} during #{month}, according to #{"California’s Department of Consumer Affairs (DCA).".to_link(url_1)}\n

    Professional licenses are issued in part to help the city keep record of any businesses that may owe taxes. A decrease in the amount of licenses issued could mean the city will receive less tax income in the coming year. Licenses are eligible for renewal up until their expiration date.

    	#{"#{license_s.capitalize} set to expire during #{month}".to_table_title}#{table}\n
    BODY

    prepare_output(stage, output, export, options)
  end
end

def table_from_data(records)
  table = StoryTable.new
  table.header = ['License Holder', 'License Type', 'Lapse Date', 'Issued Date']
  table.content = []

  det = Determiner.new

  records.each do |rec|
    if rec['lapse_date'] != '0000-00-00'
      lapse_date = DateTime.strptime(rec['lapse_date'], '%Y-%m-%d').strftime('%m-%d-%Y')
    else
      lapse_date = 'N/A'
    end

    if rec['issued_date'] != '0000-00-00'
      issued_date = DateTime.strptime(rec['issued_date'], '%Y-%m-%d').strftime('%m-%d-%Y')
    else
      issued_date = 'N/A'
    end

    table.content << [
        det.determine(rec['license_holder']) == "Organization" ?  Cleaner.org_clean(rec['license_holder']) : Cleaner.person_clean(rec['license_holder']),
        rec['license_type'],
        lapse_date,
        issued_date
    ]
  end
  table
end

def get_zips(db01)
  root_query = "SELECT DISTINCT (zip) FROM california_professional_licensing_list WHERE state = 'California' AND zip != 'N/A';"
  db01.client.query(root_query).to_a
end

def get_count(db01, zip, month, year)
  root_query = "SELECT COUNT(license_holder) AS count FROM
                (
                    SELECT name AS license_holder, MAX(last_scrape_date), MAX(expiration_date) AS last_exp_date
                    FROM california_professional_licensing_list
                    WHERE license_number != '' AND zip = '#{zip}' AND state = 'California'
                    GROUP BY license_holder
                ) AS clh
                WHERE MONTH(clh.last_exp_date) = #{month} AND YEAR(clh.last_exp_date) = #{year};"
  db01.client.query(root_query).to_a
end

def get_org_id_by_zip_and_state(db01, zip, state)
  root_query = "SELECT pl_production_org_id AS org_id
                FROM usa_raw.usa_administrative_division_counties_places_matching
                WHERE short_name = (SELECT primary_city FROM zipcode_data WHERE zip_char = '#{zip}' AND state = 'CA') AND
                      kind = 'city' AND bad_matching IS NULL AND
                      state_name = '#{state}';"
  db01.client.query(root_query).to_a
end

def get_table_records(db01, zip, month, year)
  # 'license_holder' 'license_type' 'lapse_date' 'issued_date'
  root_query = "SELECT params.name AS license_holder, main.license_number,
                       main.license_type AS license_type, params.issuance_date AS issued_date,
                       main.last_exp_date AS lapse_date
                FROM (
                  SELECT id, name AS license_holder, MAX(last_scrape_date), MAX(expiration_date) AS last_exp_date, license_number, license_type
                  FROM california_professional_licensing_list
                  WHERE license_number != '' AND zip = '#{zip}' AND state = 'California'
                  GROUP BY license_holder
                ) AS main
                LEFT JOIN california_professional_licensing AS params
                       ON params.list_id = main.id
                WHERE MONTH(main.last_exp_date) = #{month} AND YEAR(main.last_exp_date) = #{year}
                GROUP BY license_holder"
  db01.client.query(root_query).to_a
end
