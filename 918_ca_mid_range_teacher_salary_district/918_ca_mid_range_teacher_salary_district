California - Mid-range teacher salary (District)
https://docs.google.com/document/d/1SWHB7e1dK6GW7FftfUyOXI80PLcEamTrxOVMDzVIsUE/edit#heading=h.gjdgxs

@john.putz
Dev Name: Dmitry S.
Story type Name: #909 California - Mid-range teacher salary (District)
FCD:
Sample story:
Period:
Total Count:
Max Project Count by client:
Notes:
_____________________________________________________

STAGE TABLE DEFINITION
insert into stage_definition_configurations (tbl, definition) select 'california_mid_range_teacher_salary_district_staging','{"district":"varchar(255)","average_2019":"int","average_2018":"int","average_max":"int","avg_class":"int","top_district_name":"varchar(255)","top_district_average":"int","difference_pct_max":"float","difference_pct":"float","top_class":"int(11)","year":"int(4)","story_table":"longtext"}';

#755

STAGE TABLE CREATION
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_definition' --task='create_tbl' --config_id=755 -t

STAGE POPULATION CONFIGURATION
insert into stage_population_configurations(project_name, tbl, definition) select 'California - Mid-range teacher salary (District)', 'california_mid_range_teacher_salary_district_staging', '{"known_entities":{"project_name":"California - Mid-range teacher salary (District)"},"resources":{":root":{"host":"db05","db":"loki_storycreator","tbl":"sort_by_once","identifier":"id","mapping":{}}},"stage_derivations":{"source_id":{"method":"as_int","arguments":{"raw_field":"id"}},"staging":{"stage_fields":["EMPTYSET"],"method":"california_mid_range_teacher_salary_district_population","arguments":{}}}}';

population_config_id: #857

STAGE POPULATION:
$ cd ~/Loki/procedures
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=857 -t --threads_count=1


STORY CREATOR CONFIGURATION:
insert into storycreator_configurations (tbl, template, extension, export_arguments) select 'california_mid_range_teacher_salary_district_staging', 'california_mid_range_teacher_salary_district_creation', 'stories', 'where (story_created != 1 or story_created is null) and publication_name is not null and publication_name != ""';

creation_config_id: #739

STORY CREATION COMMAND:
bundle exec ruby Loki.rb :hle@hle_router --switch='story_creation' --config_id=739 -t


STAGING: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=739 --population_config_id=857 --story_section_ids=2 --story_tag_ids=34 --photobuckets='High School Test' --job_item_name_description='California - Mid-range teacher salary (District)' -t --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=739 --population_config_id=857 --story_section_ids=16 --story_tag_ids=147 --photobuckets='High School Test' --job_item_name_description='California - Mid-range teacher salary (District)' -t --where="stage.client_name like 'MM - %'"

STAGING: EXPORT STORIES
bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' -t -creator='Dmitry Suschinsky' --stage_tbl_org --config_id=340619



FIRST FEEDBACK
________________________________________
irb ->
load 'Loki.rb'
Hle::Story::Feedback.stories_feedback('511701546,511701553,511701552')

bundle exec ruby Loki.rb :hle_tools@stories_feedback -t --story_pl_ids=511728419,511728418,511728402


!!!!!!!!!!!!!!FCD!!!!!!!!!!!!!!!!!!!!
________________________________________________________________________________________________________________________________________

SCHEDULER:
__________
population_config_id: #857
creation_config_id: #739

tbl: california_mid_range_teacher_salary_district_staging
desc: California - Mid-range teacher salary (District)

config_id - population_config_id

Up to 2 stories per day, per pub, for up to 180 days
bundle exec ruby Loki.rb :hle@hle_scheduler -t --config_id=857 --limit=2 --start_date='2020-06-01' --total_days_till_end_date=180

__________________________________________________
чтоб проверить шедулер, что он "окейно" отработал:

select publication_name, min(publish_on), max(publish_on), count(*) from 'california_mid_range_teacher_salary_district_staging' group by publication_name;

______________________________________
PRODUCTION: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’
______________________________________

--where="client_name like 'MM - %'"

РАЗБИВКА ПО КЛИНЕТАМ!!!

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=739 --population_config_id=857 --story_section_ids=2 --story_tag_ids=34 --photobuckets='High School Test' --job_item_name_description='California - Mid-range teacher salary (District)' -t --prod --limit_config=1 --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=739 --population_config_id=857 --story_section_ids=16 --story_tag_ids=147 --photobuckets='High School Test' --job_item_name_description='California - Mid-range teacher salary (District)' -t --prod --limit_config=1 --where="stage.client_name like 'MM - %'"

______________________________________

select * from story_export_configurations_v2 where tbl = 'california_mid_range_teacher_salary_district_staging' and export_name like '%production%' order by id DESC;

______________________________________
если все ок, то выполняем без --limit_config=1

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=739 --population_config_id=857 --story_section_ids=2 --story_tag_ids=34 --photobuckets='High School Test' --job_item_name_description='California - Mid-range teacher salary (District)' -t --prod --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=739 --population_config_id=857 --story_section_ids=16 --story_tag_ids=147 --photobuckets='High School Test' --job_item_name_description='California - Mid-range teacher salary (District)' -t --prod --where="stage.client_name like 'MM - %'"
_________
повторяем

select * from story_export_configurations_v2 where tbl = 'california_mid_range_teacher_salary_district_staging' and export_name like '%production%' order by id DESC;


______________________
для построения таблицы
______________________

select s.client_name, s.publication_name, s.publication_id as project_id, ec.id as config_id, s.max_publish_on, s.total_stories from (select client_name, publication_name, publication_id, max(publish_on) as max_publish_on, count(*) as total_stories from california_mid_range_teacher_salary_district_staging group by publication_name) s join (select * from story_export_configurations_v2 where tbl ='california_mid_range_teacher_salary_district_staging' and export_name like '%production%') ec on ec.community_id = s.publication_id order by s.publication_name;


__________________________
PRODUCTION: EXPORT STORIES
__________________________

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='327979'

_____
IF OK
_____

--threads_count=7 | 13140961 | 13140960

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='327979,327988,327985,327983,327984,327996,327989,327994,327995,327981,327980,327991,327986,327993,327992,327990,327987,327998,327982,327999,327997'
___________________________


ФИНАЛЬНАЯ ТАБЛИЦА ДЛЯ ДЖОНА
___________________________

SELECT CONVERT(GROUP_CONCAT(job_item_id SEPARATOR ',') USING utf8)
FROM story_export_configurations_v2
WHERE tbl = "california_mid_range_teacher_salary_district_staging" AND
      export_name LIKE '%production%';

# pipeline-core-replica2.jnswire_prod query:

SELECT headline, c.name AS publication, concat('https://pipeline.locallabs.com/stories/', s.id) AS url,
       published_at, ji.name AS job_item, cc.name AS client
FROM stories AS s
JOIN communities AS c
  ON s.community_id = c.id
JOIN client_companies AS cc
  ON c.client_company_id = cc.id
JOIN data_entry_leads AS l
  ON l.id = s.lead_id
JOIN job_items AS ji
  ON l.job_item_id=ji.id
WHERE published_at >= '2020-05-12' AND
      deleted = 0 AND
      l.job_item_id IN (195752,195753,195756,195763,195757,195755,195758,195769,195762,195766,195771,195772,195781,195768,195761,195770,195754,195759,195764,195765,195767)
ORDER BY c.name;




REMINDER TOOL
___________________________

INSERT INTO loki_storycreator.hle_reminders
    (
        story_type_name, story_type_stage_table,
        dev_name, slack_handle, dev_email,
        story_frequency, reminders_on, manual_export_required, reminder_frequency, reminder_message,
        last_manual_export, manual_export_blocked, on_cron, warnings_on, warning_count_min, warning_frequency, warning_fix_blocked,
        data_source_checker_on, data_source_host, data_source_db, data_source_update_query
    )
VALUES
    (
        'California - Mid-range teacher salary (District)', 'california_mid_range_teacher_salary_district_staging',
        'Dmitiry Suschinsky', '@dmitiry.suschinsky', 'dsuschinsky@gmail.com',
        'quarter', 1, 1, 'quarterly', 'The Dataset located on db12.usa_raw.michigan_professional_licensing%',
        '2020-01-10', 0, 0, 0, 20000, 'quarterly', 0,
         1, 'db12','usa_raw', 'select date(max(postedTime)) date from usa_raw.michigan_professional_licensing;'
    );



# Creator: Dmitry Suschinsky
# Story type: California - Mid-range teacher salary (District)
# Template: https://docs.google.com/document/d/1maOjF6pM6WOrqVRktz-fmPEG1Rz3GW9DvSWbpj2Uc00/edit
# Created: July 2020

# tbl: california_mid_range_teacher_salary_district_staging
# db01.usa_raw.ca_report_card_teacher_salaries & Class_Size.
# branch: california_mid_range_teacher_salary_district_d_sushi
# california_mid_range_teacher_salary_district.rb

def california_mid_range_teacher_salary_district_population(line, arguments)
  db05 = Route_noprefix.new(host: DB05, stage_db: 'loki_storycreator')
  db05.client.query("use #{db05.stage_db}")



  options = derive_options({})
  message = ''
  raise message if options['option'] == 'some_error'
  year        = 2019
  m_biz_id    = 120
  location    = 'California'
  environment = 'production'
  source,
    table,
    top_district_name,
    top_district_average,
    top_class = source_query
  counter = 0
  dist_counter = 1

  source.each_with_index do |row, index|
      puts "#{index}/#{source.size} of #{dist_counter}. #{row['district']}".yellow
      puts "PL Org ID: #{row['org_id']}".green
      next if row['org_id'].nil?

      m_biz_pubs = get_journal_from_org_id(row['org_id'], environment, m_biz_id)
      m_biz_pubs   = m_biz_pubs.delete_if { |p| !p['publication_name'].match?('California') }
      mm_st_pubs = Hle::Publications.mm_pubs_excluding_states(row['org_id'], environment, location)
      publications = mm_st_pubs + m_biz_pubs
      publications.each do |publication|
      h    = {}

      h['organization_id']      = row['org_id']
      h['publication_id']       = publication['id'].to_i
      h['publication_name']     = publication['publication_name']
      h['client_id']            = publication['client_id']
      h['client_name']          = publication['client_name']
      h['source_table_id']      = 21343
      h['district']             = row['district']
      h['average_2019']         = Numbers.money(row['average_2019']).to_s.gsub(/(\d\d?)\.0/, '\1')
      h['average_2018']         = Numbers.money(row['average_2018']).to_s.gsub(/(\d\d?)\.0/, '\1')
      h['average_max']          = Numbers.money(row['average_max']).to_s.gsub(/(\d\d?)\.0/, '\1')
      h['top_district_name']    = top_district_name
      h['top_class']            = top_class
      h['top_district_average'] = Numbers.money(top_district_average).to_s.gsub(/(\d\d?)\.0/, '\1')
      h['avg_class']            = row['avg_class']
      h['difference_pct_max']   = row['difference_pct_max'].to_s.gsub(/(\d\d?)\.0/, '\1')
      h['difference_pct']       = row['difference_pct'].to_s.gsub(/(\d\d?)\.0/, '\1')
      h['year']                 = year
      h['story_table']          = table

      rules = insert_ignore_rules(h.escaped)
      query = "insert ignore into #{@config['target_table']}#{rules}"

      db05.client.query(query)
      counter += 1
    end
  end


    puts "Source size: #{source.size}"
    puts "Counter:     #{counter}"
    db05.client.close if db05
    'INVALID' # a very important string!!!
end

def california_mid_range_teacher_salary_district_creation(options)
  count = @stage_selection.count
  @stage_selection.each_with_index do |stage, i|
    print "\n PROCESSING #{i+1}/#{count}\n"

    table              = graph_from_json(stage['story_table'])
    year               = stage['year']
    average_2019       = stage['average_2019']
    average_max        = stage['average_max']
    difference_pct_max = stage['difference_pct_max'].to_i.abs
    difference_pct_max = difference_pct_max.to_s.gsub(/(\d\d?)\.0/,'\1')
    difference_pct     = stage['difference_pct'].to_s.gsub(/(\d\d?)\.0/,'\1')
    difference_pct     = difference_pct == '0' ? 'There was no difference in salaries for beginning teachers compared to last year.' :
                                                 "The difference in salaries for beginning teachers compared to last year was #{difference_pct} percent."
    top_district       = stage['top_district_name']
    top_salary         = stage['top_district_average']
    district           = stage['district']
    district_body = district == 'Santa Clara Unified' ? "Teachers in this district had the highest average pay in the state." : "The district that had the highest average pay among its beginning teachers was #{top_district} with an average salary of #{top_salary}."
    url_1              = "https://www.cde.ca.gov/"
    url_2              = "https://blogs.edweek.org/teachers/teaching_now/2019/04/which_states_have_the_highest_and_lowest_teacher_salaries.html"
    url_3              = "https://learningpolicyinstitute.org/product/interactive-map-understanding-teacher-shortages-california?utm_source=LPI+Master+List&utm_campaign=d4d19cd741-LPIMC_CATeacherShortageInteractive_20191205&utm_medium=email&utm_term=0_7e60dfa1d8-d4d19cd741-42305231"

    export = {}
    export['headline'] = <<~HEADER.squeeze(' ').chomp
    #{average_2019} average salary for beginning teachers in #{district}
    HEADER
    export['teaser'] = <<~TEASER.squeeze(' ').chomp
    During the #{year} school year, the average salary for a beginning teacher at #{district} was #{average_2019}.
    TEASER
    output = <<~BODY.squeeze(' ').chomp
    During the #{year} school year, the average salary for a beginning teacher at #{district} was #{average_2019}, according to the #{"California Department of Education.".to_link(url_1)}\ 
    This was #{difference_pct_max} percent less than the highest-paid teacher in the district who made #{average_max}. #{difference_pct}
    #{district_body}
    Salaries for teachers vary widely based on geographic region. According to the #{"National Education Association".to_link(url_2)}, there is roughly a $40,000 pay difference between teachers in California and Mississippi. 
    While California ranks second in average salaries according to the NEA, the #{"Learning Policy Institute".to_link(url_3)} estimates that 80 percent of its school districts are experiencing teacher shortages. 
    Because of these shortages, 34 percent of newly-hired teachers have substandard teaching credentials. 
			#{'Beginning teacher pay in the school district'.to_table_title}#{table}\n
    BODY

    prepare_output(stage, output, export, options)
  end
end

def source_query
  db01 = Route_noprefix.new(host: DB01, raw_db: 'usa_raw')
  db01.client.query('use usa_raw;')
  query = <<~SQL
  select year_2018.district_amount as average_2018,
       year_2019.district_amount as average_2019,
       max.average_max,
       round((AVG(avg_el.elementary + avg_sec.secondary)), 0) as avg_class,
       round((year_2019.district_amount - max.average_max)/(max.average_max)* 100, 2) as difference_pct_max,
       round((year_2019.district_amount - year_2018.district_amount)/(year_2018.district_amount)* 100, 2) as difference_pct,
       ds.district,
       ds.pl_production_org_id as org_id
from usa_raw.ca_report_card_teacher_salaries year_2018
         join usa_raw.ca_report_card_teacher_salaries year_2019 on year_2019.district_code = year_2018.district_code
         join (select district, district_code, pl_production_org_id from usa_raw.ca_report_card_district_contact_info group by district_code) ds on year_2018.district_code = ds.district_code
         join (select MAX(district_amount) average_max, district_code from usa_raw.ca_report_card_teacher_salaries group by district_code) max on
             year_2018.district_code = max.district_code
         join(select AVG(avg_class_size) elementary, district_code from usa_raw.ca_report_card_elementary_class_size group by district_code) avg_el
             on year_2018.district_code = avg_el.district_code
         join(select AVG(avg_class_size) secondary, district_code from usa_raw.ca_report_card_secondary_class_size group by district_code) avg_sec
             on year_2018.district_code = avg_sec.district_code
where year_2018.category = 'Beginning Teacher Salary' and
      year_2019.category = 'Beginning Teacher Salary' and
      year_2019.school_year = '2018-19' and
      year_2018.school_year = '2017-18' and
      year_2018.district_amount IS NOT NULL and
      year_2019.district_amount IS NOT NULL and
      avg_el.elementary IS NOT NULL and
      avg_sec.secondary IS NOT NULL and
      ds.pl_production_org_id IS NOT NULL
group by year_2018.district_code
order by average_2019 desc;
  SQL
  result = db01.client.query(query).to_a.ranking!('district')
  db01.client.close

  top_district_name    = result.first['district']
  top_district_average = result.first['average_2019']
  top_class            = result.first['avg_class']
  result.map { |el| el['average_2019'] = Numbers.money(el['average_2019']).gsub(/(\d\d?)\.0/, '\1')}
  table = result.build_table(
    [{heading: 'Rank',
      column: 'rank'},
     {heading: 'District',
      column: 'district'},
     {heading: 'Salary',
      column: 'average_2019'}])
  [result, table, top_district_name, top_district_average, top_class]
end