STAGE TABLE DEFINITION
insert into stage_definition_configurations (tbl, definition) select 'mi_prof_licenses_exp_comp_prev_period_city_q_staging','{"city":"varchar(255)","quarter":"varchar(255)","quarter_val":"int(11)","quarter_val_prev":"int(11)","table":"longtext"}';

#521

STAGE TABLE CREATION --STOP
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_definition' --task='create_tbl' --config_id=521 -t

STAGE POPULATION CONFIGURATION
insert into stage_population_configurations(project_name, tbl, definition) select 'Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)', 'mi_prof_licenses_exp_comp_prev_period_city_q_staging', '{"known_entities":{"project_name":"Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)"},"resources":{":root":{"host":"db05","db":"loki_storycreator","tbl":"sort_by_once","identifier":"id","mapping":{}}},"stage_derivations":{"source_id":{"method":"as_int","arguments":{"raw_field":"id"}},"staging":{"stage_fields":["EMPTYSET"],"method":"michigan_prof_licenses_exp_comp_prev_period_city_q_population","arguments":{}}}}';

population_config_id: #614

STAGE POPULATION:
$ cd ~/Loki/procedures
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=614 -t --year='2019'


STORY CREATOR CONFIGURATION:
insert into storycreator_configurations (tbl, template, extension, export_arguments) select 'mi_prof_licenses_exp_comp_prev_period_city_q_staging', 'michigan_prof_licenses_exp_comp_prev_period_city_q_creation', 'stories', 'where (story_created != 1 or story_created is null) and publication_name is not null and publication_name != ""';

creation_config_id: #493

STORY CREATION COMMAND:
bundle exec ruby Loki.rb :hle@hle_router --switch='story_creation' --config_id=493 -t


STAGING: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=493 --population_config_id=614 --story_section_ids=2 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)' -t


STAGING: EXPORT STORIES
bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' -t -creator='Dmitry Suschinsky' --stage_tbl_org --config_ids='219562,219573,219546,219541,219553'



FIRST FEEDBACK
________________________________________
irb ->
load 'Loki.rb'
Hle::Story::Feedback.stories_feedback('511671408,511671407,511671406,511671405')



!!!!!!!!!!!!!!FCD!!!!!!!!!!!!!!!!!!!!
________________________________________________________________________________________________________________________________________

SCHEDULER:
__________
population_config_id: #614
creation_config_id: #493

tbl: mi_prof_licenses_exp_comp_prev_period_city_q_staging
desc: Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)

config_id - population_config_id

Up to 5 stories per day, per publication, for up to 50 days, starting January 20
bundle exec ruby Loki.rb :hle@hle_scheduler -t --config_id=614 --limit=5 --start_date='2020-01-20' --total_days_till_end_date=50

__________________________________________________
чтоб проверить шедулер, что он "окейно" отработал:

select publication_name, min(publish_on), max(publish_on), count(*) from 'mi_prof_licenses_exp_comp_prev_period_city_q_staging' group by publication_name;

______________________________________
PRODUCTION: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’
______________________________________


РАЗБИВКА ПО КЛИНЕТАМ!!!
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=493 --population_config_id=614 --story_section_ids=2 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)' -t --prod --limit_config=1 --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=493 --population_config_id=614 --story_section_ids=16 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)' -t --prod --limit_config=1 --where="client_name like 'MM - %'"

______________________________________

select * from story_export_configurations_v2 where tbl = 'michigan_prof_lic_issued_comp_prev_per_county_q_staging' and export_name like '%production%' order by id DESC;

______________________________________
если все ок, то выполняем без --limit_config=1

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=493 --population_config_id=614 --story_section_ids=2 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)' -t --prod --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=493 --population_config_id=614 --story_section_ids=16 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)' -t --prod --where="client_name like 'MM - %'"
_________
повторяем

select * from story_export_configurations_v2 where tbl = 'michigan_prof_lic_issued_comp_prev_per_county_q_staging' and export_name like '%production%' order by id DESC;


______________________
для построения таблицы
______________________

select s.client_name, s.publication_name, s.publication_id as project_id, ec.id as config_id, s.max_publish_on, s.total_stories from (select client_name, publication_name, publication_id, max(publish_on) as max_publish_on, count(*) as total_stories from mi_prof_licenses_exp_comp_prev_period_city_q_staging group by publication_name) s join (select * from story_export_configurations_v2 where tbl ='mi_prof_licenses_exp_comp_prev_period_city_q_staging' and export_name like '%production%') ec on ec.community_id = s.publication_id order by s.publication_name;


__________________________
PRODUCTION: EXPORT STORIES
__________________________

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org='mi_prof_licenses_exp_comp_prev_period_city_q_staging' --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_id=216480 --limit=1

_____
IF OK
_____

--threads_count=7 | 13140961 | 13140960

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='...'
___________________________


ФИНАЛЬНАЯ ТАБЛИЦА ДЛЯ ДЖОНА
___________________________

SELECT CONVERT(GROUP_CONCAT(job_item_id SEPARATOR ',') USING utf8)
FROM story_export_configurations_v2
WHERE tbl = "mi_prof_licenses_exp_comp_prev_period_city_q_staging" AND
      export_name LIKE '%production%';

# pipeline-core-replica2.jnswire_prod query:

SELECT headline, c.name AS publication, concat('https://pipeline.locallabs.com/stories/', s.id) AS url,
       published_at, ji.name AS job_item, cc.name AS client
FROM stories AS s
JOIN communities AS c
  ON s.community_id = c.id
JOIN client_companies AS cc
  ON c.client_company_id = cc.id
JOIN data_entry_leads AS l
  ON l.id = s.lead_id
JOIN job_items AS ji
  ON l.job_item_id=ji.id
WHERE published_at >= '2020-01-07' AND
      deleted = 0 AND
      l.job_item_id IN (114665,114653,114643,114638,114637,114644,114655,114649,114658,114663,114632,114645,114670,114639,114652,114642,114647,114648,114657,114661,114634,114636,114668,114660,114656,114651,114669,114671,114662,114654,114640,114646,114664,114650,114666,114672,114641,114635,114659,114667,114698,114687,114678,114702,114691,114676,114693,114674,114703,114675,114682,114633,114700,114673,114684,114685,114699,114694,114695,114704,114692,114677,114696,114681,114683,114697,114705,114688,114706,114679,114690,114680,114707,114701,114686,114689)
ORDER BY c.name;




REMINDER TOOL
___________________________

INSERT INTO loki_storycreator.hle_reminders
    (
        story_type_name, story_type_stage_table,
        dev_name, slack_handle, dev_email,
        story_frequency, reminders_on, manual_export_required, reminder_frequency, reminder_message,
        last_manual_export, manual_export_blocked, on_cron, warnings_on, warning_count_min, warning_frequency, warning_fix_blocked,
        data_source_checker_on, data_source_host, data_source_db, data_source_update_query
    )
VALUES
    (
        'Michigan - Professional Licenses Expiring Compared to prev period (City - Quarter)', 'mi_prof_licenses_exp_comp_prev_period_city_q_staging',
        'Dmitiry Suschinsky', '@dmitiry.suschinsky', 'dsuschinsky@gmail.com',
        'quarter', 1, 1, 'quarterly', 'The Dataset located on db12.usa_raw.michigan_professional_licensing%',
        '2020-01-10', 0, 0, 0, 20000, 'quarterly', 0,
         1, 'db12','usa_raw', 'select date(max(postedTime)) date from usa_raw.michigan_professional_licensing;'
    );










493


# Creator: Dmitry Suschinsky
# Story type: Michigan - Professional Licenses Expiring Compared to same time LY (County - Month)
# Template: https://docs.google.com/document/d/12lAN0PWWqzrorO8Mo8gU0tJ0bWQwN8-WBPwvf3Iz--U/edit#heading=h.gjdgxs
# Created: January 2020

# tbl: mi_prof_licenses_exp_comp_same_time_ly_county_m_staging
# db12.usa_raw.michigan_professional_licensing
# branch: michigan_prof_licenses_exp_comp_same_time_ly_county_m_d_sushi
# michigan_prof_licenses_exp_comp_same_time_ly_county_m.rb

def quarter(month)
  case month
  when 1,2,3 then 1
  when 4,5,6 then 2
  when 7,8,9 then 3
  when 10,11,12 then 4
  end
end

def ranking(records)
  records.each_with_index do |value, j|
    value['rank'] = j + 1 if j == 0
    value['rank'] = j + 1 if records[j]['count_license'] < records[j - 1]['count_license'] && j != 0
    value['rank'] = records[j-1]['rank'] if records[j]['count_license'] == records[j - 1]['count_license']
  end
end

def get_records(data_route, month_number, year)
  root_query = "SELECT county, COUNT(main.id) AS count_license,
                       main.license_type AS license_type,
                       expiration_date
                FROM usa_raw.michigan_professional_licensing__l_info main
                  INNER JOIN (
                    SELECT license_number, MAX(created_at) AS max_created_at
                    FROM  usa_raw.michigan_professional_licensing__l_info
                    WHERE license_number != ''
                    GROUP BY license_number
                  ) t ON t.license_number = main.license_number AND t.max_created_at = main.created_at
                WHERE county != '' AND
                      status RLIKE 'Lapsed' AND
                      MONTH(expiration_date) = '#{month_number}' AND YEAR(expiration_date) = '#{year}'
                GROUP BY county
                ORDER BY count_license DESC;"
  data_route.client.query(root_query).to_a
end

def get_ly_month_records(data_route, month_number, year, county)
  root_query = "SELECT county, COUNT(main.id) AS count_license_ly,
                       profession_tb.profession AS profession,
                       profession_tb.profession_singular AS profession_clear,
                       expiration_date
                FROM usa_raw.michigan_professional_licensing__l_info main
                  INNER JOIN (
                    SELECT license_number, MAX(created_at) AS max_created_at
                    FROM  usa_raw.michigan_professional_licensing__l_info
                    WHERE license_number != ''
                    GROUP BY license_number
                  ) t ON t.license_number = main.license_number AND t.max_created_at = main.created_at
                  LEFT JOIN usa_raw.michigan_professional_licensing__profession profession_tb
                    ON profession_tb.profession = main.profession
                WHERE county != '' AND
                      status RLIKE 'Lapsed' AND
                      county = '#{county}' AND
                      MONTH(expiration_date) = '#{month_number}' AND YEAR(expiration_date) = '#{year}'
                GROUP BY county;"
  data_route.client.query(root_query).to_a
end

def get_table_records(data_route, county, month_number, year)
  root_query = "SELECT name.name_clear AS license_holder,
                       main.expiration_date AS lapse_date,
                       main.issue_date AS issued_date,
                       main.license_type
                FROM michigan_professional_licensing__l_info AS main
                  INNER JOIN (
                    SELECT license_number, MAX(created_at) AS max_created_at
                    FROM  usa_raw.michigan_professional_licensing__l_info
                    WHERE license_number != ''
                    GROUP BY license_number
                  ) t ON t.license_number = main.license_number AND t.max_created_at = main.created_at
                LEFT JOIN michigan_professional_licensing__name_clear AS name
                ON name.id = main.id_name
                WHERE status RLIKE 'Lapsed' AND
                      county = '#{county}' AND
                      MONTH(expiration_date) = '#{month_number}' AND YEAR(expiration_date) = '#{year}';"
  data_route.client.query(root_query).to_a
end

def get_org_ids(data_route, county)
  root_query = "SELECT admin.pl_production_org_id AS org_id, clean_county AS county
                FROM michigan_professional_licensing_separ_addr AS addr
                    LEFT JOIN usa_administrative_division_counties_places_matching AS admin
                    ON admin.county_name = CONCAT(addr.clean_county, ' County')
                WHERE clean_county = '#{county}' AND
                      admin.bad_matching IS NULL AND admin.has_duplicate = 0 AND
                      admin.pl_production_org_id IS NOT NULL AND
                      admin.pl_production_org_id != ''
                GROUP BY admin.pl_production_org_id;"
  data_route.client.query(root_query).to_a
end

def get_percentage_diff(data1, data2)
  if data2 != 0
    ((data1 - data2) / data2 * 100).round(1).abs.to_s.sub(/\.0$/,'')
  else
    100.to_i
  end
end

def growth_type(curr, prev)
  # [a/an] #-percent [increase over/decrease from]|unchanged from]
  if curr == prev
    'unchanged from the same month of the previous year,'
  elsif curr > prev && prev != 0
    'a ' + get_percentage_diff(curr, prev).to_s + '-percent increase over the same month of the previous year,'
  elsif curr < prev && prev != 0
    'a ' + get_percentage_diff(curr, prev).to_s + '-percent decrease from the same month of the previous year,'
  end
end

def prepare_count(val)
  if val.to_i < 10
    Numbers.num_to_words(val).capitalize
  else
    val
  end
end

def license_count(val)
  return 'licenses' if val > 1
  return 'license'
end

def prepare_count_body(val_1, val_2, zip, growth_type, profession, quarter)
  if val_1 > val_2 && val_2 == 0
    "#{prepare_count(val_1)} #{profession.downcase} #{was_were(val_1)} issued in zip code #{zip} in the #{quarter}. No #{profession.downcase} licenses in zip code #{zip} issued in the same quarter of the previous year.\n\n"
  elsif val_1 > 0 && val_2 > 0
    "#{prepare_count(val_1)} #{profession.downcase} #{was_were(val_1)} issued in zip code #{zip} in the #{quarter}, #{growth_type} the same quarter of the previous year.\n\n"
  end
end

def table_from_data(table_rows)
  table = []

  table_rows.each do |tr|
    table << { "License Holder" => tr['license_holder'],
               "License Type" => tr['license_type'],
               "Lapse Date" => tr['lapse_date'],
               "Issued Date" => tr['issued_date']
    }
  end
  table
end

def was_were(val)
  val > 1 ? 'were' : 'was'
end

def michigan_prof_licenses_exp_comp_same_time_ly_county_m_stage_population(line, argument)
  require 'bigdecimal'
  require 'bigdecimal/util'
  require 'date'

  puts("\n!!!\nParameter year required 'date' \n!!!\n") unless (@options['date'])
  return 'INVALID' unless @options['date']
  date = @options['date']
  return 'INVALID' unless date.to_s.match(/^\d{4}-\d{1,2}-\d{1,2}$/)
  threads_count = @options['threads_count'].to_i || 3

  now = Date.parse(@options['date'])

  year = now.year
  month_number = now.month
  month = (now - now.month).strftime("%B")
  return 'INVALID' unless month_number.to_s.match(/^([1-9]|1[0-2])$/)

  puts 'month_number: ', month_number
  puts 'month: ', month
  puts 'year: ', year

  main_route = Route_noprefix.new(host: DB12, stage_db: 'usa_raw')
  main_route.client.query("use #{main_route.stage_db}")

  data_state = Route_noprefix.new(host: DB12, stage_db: 'usa_raw')
  data_state.client.query("use #{data_state.stage_db}")

  records = get_records(data_state, month_number, year)

  @semaphore = Mutex.new
  threads = Array.new(threads_count) do
    Thread.new do
      delivery = Route_noprefix.new(host: DB05, stage_db: 'loki_storycreator')
      delivery.client.query("use #{delivery.stage_db}")

      thread_route = Route_noprefix.new(host: DB12, stage_db: 'usa_raw')
      thread_route.client.query("use #{thread_route.stage_db}")

      reasons = {
          publications: [],
          publication_name: []
      }

      loop do
        # records.each do |rec|
        rec = nil
        @semaphore.synchronize {
          rec = records.shift
        }
        break if rec.nil? && rec.count.zero?

        org_ids = get_org_ids(thread_route, rec['county'])

        unless org_ids
          reasons[:publications] << rec['county']
          next
        end

        table_records = get_table_records(thread_route, rec['county'], month_number, year)
        table = table_from_data(table_records)
        month_val_ly = get_ly_month_records(thread_route, month_number, year - 1, rec['county'])

        org_ids.each do |org_id|

          # Metro Business Network
          # MM-Michigan
          publications = []
          publications << Hle::Publications.mm_pubs_excluding_states(org_id['org_id'], 'production', 'Michigan')
          publications << get_journal_from_org_id(org_id['org_id'], 'production', 120) rescue nil

          publications.flatten!.uniq!

          if publications.count.zero?
            reasons[:publications] << rec['county']
            next
          end

          publications.each do |publication|
            hash = {}

            hash['publication_name'] = publication['publication_name']
            if hash['publication_name'].empty?
              reasons[:publication_name] << publication['id']
              next
            end

            hash['client_name'] = publication['client_name']
            hash['client_id'] = publication['client_id']
            hash['publication_id'] = publication['id'].to_i
            hash['source_table_id'] = 19874
            hash['source_id'] = 19833 * 1000000000 + publication['id'].to_i * 10000000 + Date.today.to_time.to_i
            hash['organization_id'] = org_id['org_id']

            hash['county'] = org_id['county']
            hash['license_type'] = rec['license_type']
            hash['year'] = year.to_i
            hash['month'] = month
            hash['month_val'] = rec['count_license']
            hash['month_val_ly'] = month_val_ly[0] != nil ? month_val_ly[0]['count_license_ly'] : 0

            hash['table'] = table.to_json

            rules = insert_rules(hash.escaped)
            query = "insert into #{@config['target_table']}#{rules}"
            delivery.client.query(query)
            puts hash
          end
          p reasons
        end
      end

    rescue => e
      print "#{e.to_s} ~> #{e.backtrace.join("\n")}\n"
    ensure
      data_state.client.close if data_state
      delivery.client.close
      thread_route.client.close
    end

  end
  threads.each(&:join)
  main_route.client.close
  return 'INVALID'
end

def michigan_prof_licenses_exp_comp_same_time_ly_county_m_stage_creation(options, mail_sender = false)
  i = 0
  count = @stage_selection.count
  @stage_selection.each do |stage|
    i += 1
    p "#{i}/#{count}: "
    export = {}

    county = stage['county']
    month_val = stage['month_val']
    month_val_ly = stage['month_val_ly']
    month = stage['month']
    year = stage['year']
    growth_type = growth_type(stage['month_val'].to_f, stage['month_val_ly'].to_f)

    month_val == 1 ? license_s = 'license' : license_s = 'licenses'

    if month_val < 10
      count_headline = "#{Numbers.num_to_words(month_val).capitalize} #{license_s}"
      count_str = "#{Numbers.num_to_words(month_val).capitalize} #{license_s}"
    else
      count_headline = "#{month_val} #{license_s}"
      count_str = "#{month_val} #{license_s}"
    end

    table = JSON.parse(stage['table'])
    table = "#{graph_from_json(table.to_json)}" unless table.eql?([])

    export['headline'] = "#{count_headline} lapsed in #{county} County during #{month}"
    export['teaser'] = "#{count_str} lapsed in #{county} County during #{month}, #{growth_type} according to Michigan's Department of Licensing and Regulatory Affairs (LARA)."

    output = ''
    output << "#{count_str} lapsed in #{county} County during #{month}, #{growth_type} according to <a href='https://www.michigan.gov/lara/'>Michigan's Department of Licensing and Regulatory Affairs (LARA)</a>.\n\n"

    if month_val_ly == 0
      output << "No licenses lapsed in #{county} County during #{month} of the #{year - 1}.\n\n"
    end

    output << "LARA is composed of several agencies, bureaus and commissions that influence business growth and job creation through regulation.\n\n"

    output << "<div style=\"font-size:18px\"><strong>#{license_s.capitalize} lapsed in #{county} County during #{month}</strong></div>"
    output << table

    export = prepare_output(stage, output, export, options)
  end
end