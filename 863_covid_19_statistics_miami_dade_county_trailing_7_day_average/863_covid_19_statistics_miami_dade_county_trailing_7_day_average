Covid-19 Statistics - Trailing 7 day average
https://docs.google.com/document/d/1Wg9IgufP1kuMcgA2Hvomfd7lj0QeT4IaSLPHzL6hNr8/edit

STAGE TABLE DEFINITION
insert into stage_definition_configurations (tbl, definition) select 'covid_19_statistics_miami_dade_county_trailing_7_day_average_staging','{"zip":"VARCHAR(128)","count":"int(10)","year":"int(4)","story_table":"LONGTEXT"}';

#646

STAGE TABLE CREATION
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_definition' --task='create_tbl' --config_id=646 -t

STAGE POPULATION CONFIGURATION
insert into stage_population_configurations(project_name, tbl, definition) select 'Covid-19 Statistics - Trailing 7 day average', 'covid_19_statistics_miami_dade_county_trailing_7_day_average_staging', '{"known_entities":{"project_name":"Covid-19 Statistics - Trailing 7 day average"},"resources":{":root":{"host":"db05","db":"loki_storycreator","tbl":"sort_by_once","identifier":"id","mapping":{}}},"stage_derivations":{"source_id":{"method":"as_int","arguments":{"raw_field":"id"}},"staging":{"stage_fields":["EMPTYSET"],"method":"covid_19_statistics_miami_dade_county_trailing_7_day_average_population","arguments":{}}}}';

population_config_id: #760

STAGE POPULATION:
$ cd ~/Loki/procedures
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=760 -t --year='2020' --threads_count=1


STORY CREATOR CONFIGURATION:
insert into storycreator_configurations (tbl, template, extension, export_arguments) select 'covid_19_statistics_miami_dade_county_trailing_7_day_average_staging', 'covid_19_statistics_miami_dade_county_trailing_7_day_average_creation', 'stories', 'where (story_created != 1 or story_created is null) and publication_name is not null and publication_name != ""';

creation_config_id: #640

STORY CREATION COMMAND:
bundle exec ruby Loki.rb :hle@hle_router --switch='story_creation' --config_id=640 -t


STAGING: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=640 --population_config_id=760 --story_section_ids=2 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Covid-19 Statistics - Trailing 7 day average' -t --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=640 --population_config_id=760 --story_section_ids=16 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Covid-19 Statistics - Trailing 7 day average' -t --where="stage.client_name like 'MM - %'"

STAGING: EXPORT STORIES
bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' -t -creator='Dmitry Suschinsky' --stage_tbl_org --config_ids='315210-315219'



FIRST FEEDBACK
________________________________________
irb ->
load 'Loki.rb'
Hle::Story::Feedback.stories_feedback('511701546,511701553,511701552')

bundle exec ruby Loki.rb :hle_tools@stories_feedback -t --story_pl_ids=511707202,511707105,511707179


!!!!!!!!!!!!!!FCD!!!!!!!!!!!!!!!!!!!!
________________________________________________________________________________________________________________________________________

SCHEDULER:
__________
population_config_id: #760
creation_config_id: #640

tbl: covid_19_statistics_miami_dade_county_trailing_7_day_average_staging
desc: Covid-19 Statistics - Trailing 7 day average

config_id - population_config_id

Up to 2 stories per day, per pub, for up to 180 days
bundle exec ruby Loki.rb :hle@hle_scheduler -t --config_id=760 --limit=2 --start_date='2020-06-01' --total_days_till_end_date=180

__________________________________________________
чтоб проверить шедулер, что он "окейно" отработал:

select publication_name, min(publish_on), max(publish_on), count(*) from 'covid_19_statistics_miami_dade_county_trailing_7_day_average_staging' group by publication_name;

______________________________________
PRODUCTION: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’
______________________________________

--where="client_name like 'MM - %'"

РАЗБИВКА ПО КЛИНЕТАМ!!!

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=640 --population_config_id=760 --story_section_ids=2 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Covid-19 Statistics - Trailing 7 day average' -t --prod --limit_config=1 --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=640 --population_config_id=760 --story_section_ids=16 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Covid-19 Statistics - Trailing 7 day average' -t --prod --limit_config=1 --where="stage.client_name like 'MM - %'"

______________________________________

select * from story_export_configurations_v2 where tbl = 'covid_19_statistics_miami_dade_county_trailing_7_day_average_staging' and export_name like '%production%' order by id DESC;

______________________________________
если все ок, то выполняем без --limit_config=1

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=640 --population_config_id=760 --story_section_ids=2 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Covid-19 Statistics - Trailing 7 day average' -t --prod --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=640 --population_config_id=760 --story_section_ids=16 --story_tag_ids=9 --photobuckets='General Business - 1000x667' --job_item_name_description='Covid-19 Statistics - Trailing 7 day average' -t --prod --where="stage.client_name like 'MM - %'"
_________
повторяем

select * from story_export_configurations_v2 where tbl = 'covid_19_statistics_miami_dade_county_trailing_7_day_average_staging' and export_name like '%production%' order by id DESC;


______________________
для построения таблицы
______________________

select s.client_name, s.publication_name, s.publication_id as project_id, ec.id as config_id, s.max_publish_on, s.total_stories from (select client_name, publication_name, publication_id, max(publish_on) as max_publish_on, count(*) as total_stories from covid_19_statistics_miami_dade_county_trailing_7_day_average_staging group by publication_name) s join (select * from story_export_configurations_v2 where tbl ='covid_19_statistics_miami_dade_county_trailing_7_day_average_staging' and export_name like '%production%') ec on ec.community_id = s.publication_id order by s.publication_name;


__________________________
PRODUCTION: EXPORT STORIES
__________________________

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='327979'

_____
IF OK
_____

--threads_count=7 | 13140961 | 13140960

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='327979,327988,327985,327983,327984,327996,327989,327994,327995,327981,327980,327991,327986,327993,327992,327990,327987,327998,327982,327999,327997'
___________________________


ФИНАЛЬНАЯ ТАБЛИЦА ДЛЯ ДЖОНА
___________________________

SELECT CONVERT(GROUP_CONCAT(job_item_id SEPARATOR ',') USING utf8)
FROM story_export_configurations_v2
WHERE tbl = "covid_19_statistics_miami_dade_county_trailing_7_day_average_staging" AND
      export_name LIKE '%production%';

# pipeline-core-replica2.jnswire_prod query:

SELECT headline, c.name AS publication, concat('https://pipeline.locallabs.com/stories/', s.id) AS url,
       published_at, ji.name AS job_item, cc.name AS client
FROM stories AS s
JOIN communities AS c
  ON s.community_id = c.id
JOIN client_companies AS cc
  ON c.client_company_id = cc.id
JOIN data_entry_leads AS l
  ON l.id = s.lead_id
JOIN job_items AS ji
  ON l.job_item_id=ji.id
WHERE published_at >= '2020-05-12' AND
      deleted = 0 AND
      l.job_item_id IN (195752,195753,195756,195763,195757,195755,195758,195769,195762,195766,195771,195772,195760,195768,195761,195770,195754,195759,195764,195765,195767)
ORDER BY c.name;




REMINDER TOOL
___________________________

INSERT INTO loki_storycreator.hle_reminders
    (
        story_type_name, story_type_stage_table,
        dev_name, slack_handle, dev_email,
        story_frequency, reminders_on, manual_export_required, reminder_frequency, reminder_message,
        last_manual_export, manual_export_blocked, on_cron, warnings_on, warning_count_min, warning_frequency, warning_fix_blocked,
        data_source_checker_on, data_source_host, data_source_db, data_source_update_query
    )
VALUES
    (
        'Covid-19 Statistics - Trailing 7 day average', 'covid_19_statistics_miami_dade_county_trailing_7_day_average_staging',
        'Dmitiry Suschinsky', '@dmitiry.suschinsky', 'dsuschinsky@gmail.com',
        'quarter', 1, 1, 'quarterly', 'The Dataset located on db12.usa_raw.michigan_professional_licensing%',
        '2020-01-10', 0, 0, 0, 20000, 'quarterly', 0,
         1, 'db12','usa_raw', 'select date(max(postedTime)) date from usa_raw.michigan_professional_licensing;'
    );





# Creator: Dmitry Suschinsky
# Story type: Covid-19 Statistics - Trailing 7 day average
# Template: https://docs.google.com/document/d/1MDXgVdwxnvQKjbqXOC2R-OcBBk5MU8CnRtdNNic5Mu0/edit
# Created: April 2020

# tbl: covid_19_statistics_miami_dade_county_trailing_7_day_average_staging
# db01.usa_raw.california_professional_licensing_list
# branch: covid_19_statistics_miami_dade_county_trailing_7_day_average_d_sushi
# ca_prof_licenses_issued_zip_year.rb

def get_zips(data_route)
  root_query = "SELECT DISTINCT (zip) FROM california_professional_licensing_list WHERE state = 'California' AND zip != 'N/A';"
  data_route.client.query(root_query).to_a
end

def growth_type_head_line(curr, prev, zip_population_diff)
  # increases by #, decreases by #, or unchanged
  return "increases by #{separate_comma(zip_population_diff)} people" if curr > prev
  return "decreases by #{separate_comma(zip_population_diff)} people" if curr < prev
  'unchanged' if (curr == prev)
end

def table_from_data(records)
  table = []
  det = Determiner.new

  records.each do |rec|
    if rec['lapse_date'] != '0000-00-00'
      lapse_date = DateTime.strptime(rec['lapse_date'], '%Y-%m-%d').strftime('%m-%d-%Y')
    else
      lapse_date = 'N/A'
    end
    issued_date = DateTime.strptime(rec['issued_date'], '%Y-%m-%d')

    table << {
        "License Holder" => det.determine(rec['license_holder']) == "Organization" ?  Cleaner.org_clean(rec['license_holder']) : Cleaner.person_clean(rec['license_holder']),
        "License Type" => rec['license_type'],
        "Lapse Date" => lapse_date,
        "Issued Date" => issued_date.strftime('%m-%d-%Y')
    }
  end
  table
end

def separate_comma(number)
  if number.to_f.abs > 999
    number.to_f.round.abs.to_s.sub(/\.0$/,'').chars.to_a.reverse.each_slice(3).map(&:join).join(",").reverse
  else
    number.to_f.round(1).abs.to_s.sub(/\.0$/,'')
  end
end

def titleize(str)
  str.split.each(&:capitalize!).join(' ')
end

def get_count(data_route, zip, quarter, year)
  root_query = "SELECT COUNT(main.license_number) AS count
                FROM california_professional_licensing_list AS main
                LEFT JOIN california_professional_licensing AS params
                       ON params.list_id = main.id AND params.name = main.name
                WHERE QUARTER(params.issuance_date) = #{quarter} AND YEAR(params.issuance_date) = #{year} AND
                      main.zip = #{zip} AND state = 'California';"
  data_route.client.query(root_query).to_a
end

def get_org_id_by_zip_and_state(data_route, zip, state)
  root_query = "SELECT pl_production_org_id AS org_id
                FROM usa_raw.usa_administrative_division_counties_places_matching
                WHERE short_name = (SELECT primary_city FROM zipcode_data WHERE zip = '#{zip}' AND state = 'CA') AND
                      kind = 'city' AND
                      bad_matching IS NULL AND
                      state_name = '#{state}';"
  data_route.client.query(root_query).to_a
end

def get_table_records(data_route, zip, quarter, year)
  # 'license_holder' 'license_type' 'lapse_date' 'issued_date'
  root_query = "SELECT main.name AS license_holder, main.license_number,
                       main.license_type AS license_type, params.issuance_date AS issued_date,
                       main.expiration_date AS lapse_date
                FROM california_professional_licensing_list AS main
                LEFT JOIN california_professional_licensing AS params
                       ON params.list_id = main.id AND params.name = main.name
                WHERE QUARTER(params.issuance_date) = #{quarter} AND YEAR(params.issuance_date) = #{year} AND
                      main.license_number != '' AND main.zip = '#{zip}' AND state = 'California'"
  data_route.client.query(root_query).to_a
end

def get_percentage_diff(data1, data2)
  if data2 != 0
    ((data1 - data2) / data2 * 100).abs.round(1).to_i
  else
    100.to_i
  end
end

def growth_type(curr, prev)
  if curr.to_f == prev.to_f
    'unchanged from'
  elsif prev == 0
    "an increase of #{Numbers.num_to_words(curr.to_i)} over"
  elsif curr.to_f > prev.to_f
    'a ' + get_percentage_diff(curr.to_f, prev.to_f).to_s + '-percent increase over'
  else
    'a ' + get_percentage_diff(curr.to_f, prev.to_f).to_s + '-percent decrease from'
  end
end

def prepare_count(val)
  if val.to_i < 10
    Numbers.num_to_words(val)
  else
    val
  end
end

def was_were(val)
  if val.to_i > 0 && val.to_i == 1
    'license'
  elsif val.to_i > 0 && val.to_i > 1
    'licenses'
  end
end

def growth_type_table(curr, prev)
  if curr.to_f == prev.to_f
    '0'
  elsif curr.to_f > prev.to_f
    get_percentage_diff(curr.to_f, prev.to_f).to_s
  else
    '-' + get_percentage_diff(curr.to_f, prev.to_f).to_s
  end
end

def covid_19_statistics_miami_dade_county_trailing_7_day_average_stage_population(line, argument)
  require 'bigdecimal'
  require 'bigdecimal/util'
  require 'date'

  puts("\n!!!\nParameter required 'quarter' \n!!!\n") unless (@options['quarter'])
  return 'INVALID' unless @options['quarter']
  quarter = @options['quarter']

  puts("\n!!!\nParameter required 'year' \n!!!\n") unless (@options['year'])
  return 'INVALID' unless @options['year']
  year = @options['year']

  threads_count = @options['threads_count'].to_i || 3

  puts 'quarter: ', quarter
  puts 'year: ', year

  route = Route_noprefix.new(host: DB01, stage_db: 'usa_raw')
  route.client.query("use #{route.stage_db}")

  data_state = Route_noprefix.new(host: DB05, stage_db: 'loki_storycreator')
  data_state.client.query("use #{data_state.stage_db}")

  zips = get_zips(route)

  records = []
  zips.each do |zip|
    count = get_count(route, zip['zip'], quarter, year)[0]['count'].to_i
    puts 'COUNT: ', count if count != 0
    puts 'ZIP: ', zip if count != 0

    if count.to_i == 0
      next
    end

    pl_org_id = get_org_id_by_zip_and_state(route, zip['zip'], 'California')[0]
    org_id = pl_org_id['org_id'] if pl_org_id.class != NilClass

    if org_id == 0 || org_id == nil && count != 0
      org_id = '645047731' # 645047731 for California state
    elsif org_id == 0 || org_id == nil
      next
    end

    puts 'org_id', org_id
    puts '*----------------------------*'

    records << {quarter: quarter, year: year, zip: zip['zip'], count: count, org_id: org_id}
  end

  puts 'records: ', records
  puts 'records count: ', records.count

  @semaphore = Mutex.new
  threads = Array.new(threads_count) do
    Thread.new do
      delivery = Route_noprefix.new(host: DB05, stage_db: 'loki_storycreator')
      delivery.client.query("use #{delivery.stage_db}")
      data_state_01 = Route_noprefix.new(host: DB01, stage_db: 'usa_raw')
      data_state_01.client.query("use #{data_state_01.stage_db}")

      reasons = {
          publications: [],
          publication_name: []
      }

      loop do
        rec = nil
        @semaphore.synchronize {
          rec = records.pop
        }
        break if rec.class == NilClass

        puts 'rec: ', rec
        puts 'rec[:zip]: ', rec[:zip]

        unless rec[:org_id]
          reasons[:publications] << rec[:zip]
          next
        end

        # Metro Business Network
        # MM-California
        publications = []
        publications << Hle::Publications.mm_pubs_excluding_states(rec[:org_id], 'production', 'California')
        publications << get_journal_from_org_id(rec[:org_id], 'production', 120) rescue nil

        publications.flatten!.uniq!

        if publications.count.zero?
          reasons[:publications] << rec[:zip]
          next
        end

        table_records = get_table_records(data_state_01, rec[:zip], rec[:quarter], rec[:year])
        table = table_from_data(table_records)

        publications.each do |publication|
          hash = {}

          hash['publication_name'] = publication['publication_name']

          if hash['publication_name'].empty?
            reasons[:publication_name] << publication['id']
            next
          end

          hash['client_name'] = publication['client_name']
          hash['client_id'] = publication['client_id']
          hash['publication_id'] = publication['id'].to_i
          hash['source_table_id'] = 20483
          hash['organization_id'] = rec[:org_id]

          hash['zip'] = rec[:zip]
          hash['count'] = rec[:count]
          hash['quarter'] = rec[:quarter]
          hash['year'] = rec[:year]

          hash['story_table'] = table.to_json

          rules = insert_rules(hash.escaped)
          puts "insert into #{@config['target_table']}#{rules}"
          query = "insert into #{@config['target_table']}#{rules}"
          delivery.client.query(query)
          puts hash
        end
        puts 'REASONS: ', reasons
      end

    rescue => e
      print "#{e.to_s} ~> #{e.backtrace.join("\n")}\n"
    ensure
      data_state.client.close if data_state
      data_state_01.client.close if data_state_01
      route.client.close if route
      delivery.client.close
    end
  end
  threads.each(&:join)
  'INVALID'
end

def covid_19_statistics_miami_dade_county_trailing_7_day_average_stage_creation(options, mail_sender = false)
  i = 0
  count = @stage_selection.count
  @stage_selection.each do |stage|
    i += 1
    p "#{i}/#{count}: "
    export = {}

    zip = titleize(stage['zip'])
    count_num = stage['count'].to_i
    count = Numbers.num_to_words(count_num)
    # header: Q2 of 2019
    # body_and_teaser: the second quarter of 2019
    quarter_header = "Q#{stage['quarter']} of #{stage['year']}"
    quarter_body = "the #{Numbers.nthification(stage['quarter'].to_i)} quarter of #{stage['year']}"
    quarter_title_table = "Q#{stage['quarter']}"
    license_header_str = "license" if count_num == 1
    license_header_str = "licenses" if count_num > 1
    license_str = "was #{count} professional license" if count_num == 1
    license_str = "were #{count} professional licenses" if count_num > 1
    license_s = "License" if count_num == 1
    license_s = "Licenses" if count_num > 1

    table = JSON.parse(stage['story_table'])
    table = "#{graph_from_json(table.to_json)}" unless table.eql?([])

    export['headline'] = "#{count_num} professional #{license_header_str} issued in #{zip} during #{quarter_header}"
    export['teaser'] = "There #{license_str} issued in #{zip} during #{quarter_body}, according to California’s Department of Consumer Affairs."

    output = ''
    output << "There #{license_str} issued in #{zip} during #{quarter_body}, according to <a href='https://search.dca.ca.gov/'>California’s Department of Consumer Affairs (DCA)</a>.\n\n"

    output << "The DCA is composed of several agencies, bureaus and commissions that influence business growth and job creation through regulation. The agency has roots that date back to 1876 when California passed the Medical Practice Act of 1876. Today the agency issues more than 280 license types including certificates, registrations and permits.\n\n"
    output << "<div style=\"font-size:18px\"><strong>#{license_s} issued during #{quarter_title_table} in #{zip}</strong></div>"
    output << table

    export = prepare_output(stage, output, export, options)
  end
end
