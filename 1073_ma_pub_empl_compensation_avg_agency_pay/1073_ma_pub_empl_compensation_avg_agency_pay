MA Public Employee Compensation - Average agency pay
https://docs.google.com/document/d/1w-cn1oAEVB80KnjgDz_bej5X_WC_aP3awSShFg1Wvus/edit?usp=sharing

@john.putz
First Export. Approved by James and Aby Yusuf
Dev Name: Dmitry S.
Story type Name: #1073 MA Public Employee Compensation - Average agency pay
FCD: https://docs.google.com/document/d/1FUx5L10KnITlFOlZB3a9r6WwqA_kMD1SXzG0u_GQuhY/edit#
Sample story: https://pipeline-staging.locallabs.com/stories/511744931
Period: Once
Total Count: 296
Max Project Count by client:
MB - 150
MM -91
_____________________________________________________

STAGE TABLE DEFINITION
insert into stage_definition_configurations (tbl, definition) select 'ma_pub_empl_compensation_avg_agency_pay_staging','{"department_division":"varchar(256)","avg":"varchar(30)","avg_total":"varchar(30)","top_employee":"varchar(30)","top_first_name":"varchar(30)","top_last_name":"varchar(30)","top_position_title":"varchar(30)","story_table":"longtext"}';


#901

STAGE TABLE CREATION
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_definition' --task='create_tbl' --config_id=901 -t

STAGE POPULATION CONFIGURATION
insert into stage_population_configurations(project_name, tbl, definition) select 'MA Public Employee Compensation - Average agency pay', 'ma_pub_empl_compensation_avg_agency_pay_staging', '{"known_entities":{"project_name":"MA Public Employee Compensation - Average agency pay"},"resources":{":root":{"host":"db02","db":"loki_storycreator","tbl":"sort_by_once","identifier":"id","mapping":{}}},"stage_derivations":{"source_id":{"method":"as_int","arguments":{"raw_field":"id"}},"staging":{"stage_fields":["EMPTYSET"],"method":"s1073_ma_pub_empl_compensation_avg_agency_pay_population","arguments":{}}}}';

population_config_id: #1003

STAGE POPULATION:
$ cd ~/Loki/procedures
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=1003 -t --slack_id=UKYAGBYC9


STORY CREATOR CONFIGURATION:
insert into storycreator_configurations (tbl, template, extension, export_arguments) select 'ma_pub_empl_compensation_avg_agency_pay_staging', 's1073_ma_pub_empl_compensation_avg_agency_pay_creation', 'stories', 'where (story_created != 1 or story_created is null) and publication_name is not null and publication_name != ""';

creation_config_id: #883

STORY CREATION COMMAND:
bundle exec ruby Loki.rb :hle@hle_router --switch='story_creation' --config_id=883 -t --slack_id=UKYAGBYC9


STAGING: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=883 --population_config_id=1003 --story_section_ids=2 --story_tag_ids=3 --photobuckets='Economy' --job_item_name_description='MA Public Employee Compensation - Average agency pay' -t --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=883 --population_config_id=1003 --story_section_ids=16 --story_tag_ids=8 --photobuckets='Economy' --job_item_name_description='MA Public Employee Compensation - Average agency pay' -t --where="stage.client_name like 'MM - %'"


STAGING: EXPORT STORIES
bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' -t -creator='Dmitry Suschinsky' --stage_tbl_org --config_ids=379683,379684,379685 --slack_id=UKYAGBYC9 --threads_count=15



FIRST FEEDBACK
________________________________________
irb ->
load 'Loki.rb'
Hle::Story::Feedback.stories_feedback('511701546,511701553,511701552')

bundle exec ruby Loki.rb :hle_tools@stories_feedback -t --story_pl_ids=511746508,511746510,511746506


!!!!!!!!!!!!!!FCD!!!!!!!!!!!!!!!!!!!!
________________________________________________________________________________________________________________________________________

SCHEDULER:
__________
population_config_id: #1003
creation_config_id: #883

tbl: ma_pub_empl_compensation_avg_agency_pay_staging
desc: MA Public Employee Compensation - Average agency pay

config_id - population_config_id


1073 -- 2/90/Nov 4
bundle exec ruby Loki.rb :hle@hle_scheduler -t --config_id=1003 --limit=2 --start_date='2020-11-04' --total_days_till_end_date=90

__________________________________________________
чтоб проверить шедулер, что он "окейно" отработал:

select publication_name, min(publish_on), max(publish_on), count(*) from 'ma_pub_empl_compensation_avg_agency_pay_staging' group by publication_name;

______________________________________
PRODUCTION: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’
______________________________________

--where="client_name like 'MM - %'"

РАЗБИВКА ПО КЛИНЕТАМ!!!
MB + MM
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=883 --population_config_id=1003 --story_section_ids=16 --story_tag_ids=3 --photobuckets='Economy' --job_item_name_description='MA Public Employee Compensation - Average agency pay' -t --prod --limit_config=1 --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=883 --population_config_id=1003 --story_section_ids=2 --story_tag_ids=8 --photobuckets='Economy' --job_item_name_description='MA Public Employee Compensation - Average agency pay' -t --prod --limit_config=1 --where="stage.client_name like 'MM - %'"

______________________________________

select * from story_export_configurations_v2 where tbl = 'ma_pub_empl_compensation_avg_agency_pay_staging' and export_name like '%production%' order by id DESC;

______________________________________
если все ок, то выполняем без --limit_config=1

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=883 --population_config_id=1003 --story_section_ids=16 --story_tag_ids=3 --photobuckets='Economy' --job_item_name_description='MA Public Employee Compensation - Average agency pay' -t --prod --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=883 --population_config_id=1003 --story_section_ids=2 --story_tag_ids=8 --photobuckets='Economy' --job_item_name_description='MA Public Employee Compensation - Average agency pay' -t --prod --where="stage.client_name like 'MM - %'"
_________
повторяем

select * from story_export_configurations_v2 where tbl = 'ma_pub_empl_compensation_avg_agency_pay_staging' and export_name like '%production%' order by id DESC;


______________________
для построения таблицы
______________________

select s.client_name, s.publication_name, s.publication_id as project_id, ec.id as config_id, s.max_publish_on, s.total_stories from (select client_name, publication_name, publication_id, max(publish_on) as max_publish_on, count(*) as total_stories from ma_pub_empl_compensation_avg_agency_pay_staging group by publication_name) s join (select * from story_export_configurations_v2 where tbl ='ma_pub_empl_compensation_avg_agency_pay_staging' and export_name like '%production%') ec on ec.community_id = s.publication_id order by s.publication_name;


__________________________
PRODUCTION: EXPORT STORIES
__________________________

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='372937'

_____
IF OK
_____

--threads_count=7 | 13140961 | 131401003

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='379826,379829,379831,379825,379836,379832,379830,379835,379833,379837,379828,379834,379827' --threads_count=5 --slack_id=UKYAGBYC9
___________________________


ФИНАЛЬНАЯ ТАБЛИЦА ДЛЯ ДЖОНА
___________________________

SELECT CONVERT(GROUP_CONCAT(job_item_id SEPARATOR ',') USING utf8)
FROM story_export_configurations_v2
WHERE tbl = 'ma_pub_empl_compensation_avg_agency_pay_staging' AND
      export_name LIKE '%production%';

# pipeline-core-replica2.jnswire_prod query:

SELECT headline, c.name AS publication, concat('https://pipeline.locallabs.com/stories/', s.id) AS url,
       published_at, ji.name AS job_item, cc.name AS client
FROM stories AS s
JOIN communities AS c
  ON s.community_id = c.id
JOIN client_companies AS cc
  ON c.client_company_id = cc.id
JOIN data_entry_leads AS l
  ON l.id = s.lead_id
JOIN job_items AS ji
  ON l.job_item_id=ji.id
WHERE published_at >= '2020-11-02' AND
      deleted = 0 AND
      l.job_item_id IN (225508,225517,225510,225518,225513,225520,225519,225515,225512,225511,225514,225509,225516)
ORDER BY c.name;




REMINDER TOOL
___________________________

INSERT INTO loki_storycreator.hle_reminders
(
    hle_assignments_number, story_type_name, story_type_stage_table,
    dev_name, slack_handle, dev_email,
    story_frequency, reminders_on, manual_export_required, reminder_frequency, reminder_message,
    last_manual_export, manual_export_blocked, on_cron, warnings_on, warning_count_min, warning_frequency, warning_fix_blocked,
    data_source_checker_on, data_source_host, data_source_db, data_source_update_query
)
VALUES
(
    1073, 'MA Public Employee Compensation - Average agency pay', 'ma_pub_empl_compensation_avg_agency_pay_staging',
    'Dmitiry Suschinsky', '@dmitiry.suschinsky', 'dsuschinsky@gmail.com',
    'year', 1, 1, 'annually', 'The Dataset located on db01.usa_raw.ma_public_employee_salaries%',
    '2020-11-02', 0, 0, 0, 20000, 'annually', 0,
    1, 'db01','usa_raw', 'select date(max(postedTime)) date from usa_raw.ma_public_employee_salaries;'
);



# Creator: Dmitry Suschinsky
# Story type: MA Public Employee Compensation - Average agency pay
# Template: https://docs.google.com/document/d/1w-cn1oAEVB80KnjgDz_bej5X_WC_aP3awSShFg1Wvus/edit?usp=sharing
# Created: October 2020

# tbl: ma_pub_empl_compensation_avg_agency_pay_staging
# db01.usa_raw.ma_public_employee_salaries
# branch: s1073_ma_pub_empl_compensation_avg_agency_pay_d_sushi
# s1073_ma_pub_empl_compensation_avg_agency_pay.rb

def ma_pub_empl_compensation_avg_agency_pay_stage_population(line, argument)
  counter     = 0
  mb_id       = 120
  environment = 'production'
  records = source_query
  records.each_with_index do |rec, rec_num|
    puts 'rec: ', rec
    next if rec[:org_id] == nil

    # Metro Business Network
    # MM-Massachusetts
    mm_pubs = Hle::Publications.mm_pubs_excluding_states(rec[:org_id], environment, 'Massachusetts')
    mb_pubs = get_journal_from_org_id(rec[:org_id], environment, mb_id)
    publications = mb_pubs + mm_pubs
    publications.each_with_index do |publication, pub_num|
      publication.transform_keys!(&:to_sym)
      puts "#{rec_num * publications.size + pub_num + 1}/#{records.size * publications.size}".yellow

      host = Route_noprefix.new(host: DB02, stage_db: 'loki_storycreator')
      h    = {}

      h['organization_id']           = rec[:org_id]
      h['publication_id']            = publication[:id].to_i
      h['publication_name']          = publication[:publication_name]
      h['client_id']                 = publication[:client_id]
      h['client_name']               = publication[:client_name]
      h['source_table_id']           = 21418

      h['department_division']     = rec[:department_division]
      h['avg']                     = rec[:avg]
      h['avg_total']               = rec[:avg_total]
      h['top_employee']            = rec[:top_employee]
      h['top_first_name']          = rec[:top_first_name]
      h['top_last_name']           = rec[:top_last_name]
      h['top_position_title']      = rec[:top_position_title]
      h['story_table']             = rec[:table].to_json

      h.transform_keys!(&:to_s)
      rules = insert_ignore_rules(h.escaped)
      query = "INSERT IGNORE INTO #{host.stage_db}.#{@config['target_table']}#{rules}"

      host.client.query(query)
      host.client.close
      counter += 1
    end
  end
  puts "Source size: #{records.length}"
  puts "Counter:     #{counter}"

  'INVALID'
end

def ma_pub_empl_compensation_avg_agency_pay_stage_creation(options, mail_sender = false)
  total = @stage_selection.count

  @stage_selection.each_with_index do |stage, index|
    p "\r#{index + 1}/#{total}: \n"
    export = {}

    table = StoryTable.new.from_json(stage['story_table']).to_html

    avg                     = stage['avg']
    avg_total               = stage['avg_total']
    top_employee            = stage['top_employee']
    top_first_name          = stage['top_first_name']
    top_last_name           = stage['top_last_name']
    top_position_title      = stage['top_position_title']
    agency_name             = stage['department_division']
    year = 2019

    if agency_name.include?('College') || agency_name.include?('University')
      agency_name_str = "at #{agency_name}"
    elsif agency_name.include? 'Attorney'
      agency_name_srt = "at the #{agency_name.gsub('Attorney', 'Attorney\'s Office')}"
    else
      agency_name_str = "at the #{agency_name}"
    end

    avg_num = avg.gsub('$','').gsub(',','').to_i
    avg_total_num = avg_total.gsub('$','').gsub(',','').to_i

    if avg_num > avg_total_num
      more_less_same = 'more'
    elsif avg_num < avg_total_num
      more_less_same = 'less'
    else
      more_less_same = 'same'
    end

    export = {}
    export['headline'] = <<~HEADER.squeeze(' ').chomp
      The average worker earned #{avg} at the #{agency_name} during #{year}
    HEADER
    export['teaser'] = <<~TEASER.squeeze(' ').chomp
      The average worker earns #{avg} at the #{agency_name} during #{year}
    TEASER

    output = <<~BODY.squeeze(' ').chomp
      The average worker earns #{avg} at the #{agency_name} during #{year}, this is #{more_less_same} than the public employee average of #{avg_total}, according to <a href='https://cthru.data.socrata.com/dataset/Commonwealth-Of-Massachusetts-Payrollv2/rxhc-k6iz'>CTHRU</a>.\n
      The national median hourly wage is $19.14 according to the most recent data from the <a href='https://www.bls.gov/oes/current/oes_nat.htm#00-0000'>Bureau of Labor Statistics</a>. According to the <a href='https://data.oecd.org/earnwage/average-wages.htm#indicator-chart'>OECD</a>, the average yearly wage in the US is more than $60,000.\n
      #{"The 100 highest earners at #{agency_name} in #{year}".to_table_title}#{table}
    BODY
    export = prepare_output(stage, output, export, options)
  end
end

def source_query
  db01 = Route_noprefix.new(host: DB01, stage_db: 'usa_raw')
  db01.client.query("use #{db01.stage_db}")

  query_1 = <<~SQL
    SELECT ma_clean.DEPARTMENT_DIVISION_CLEAN AS department_division_clean,
           ma_clean.DEPARTMENT_DIVISION AS department_division,
           ma_top.max AS top_employee, ma_top.first_name AS top_first_name, ma_top.last_name AS top_last_name, ma_top.position_title AS top_position_title,
           ma_total.total, ma_clean.pl_production_org_id AS org_id
    FROM ma_public_employee_salaries AS ma
         LEFT JOIN ma_public_employee_salaries_department_division_clean ma_clean
                   ON ma_clean.DEPARTMENT_DIVISION = ma.department_division
         LEFT JOIN (SELECT ROUND(AVG(pay_total_actual)) AS total, department_division
            FROM ma_public_employee_salaries
            WHERE year = 2019 AND pay_total_actual > 1 GROUP BY department_division
         ) ma_total
         ON ma_total.department_division = ma.department_division
         JOIN (SELECT MAX(pay_total_actual) AS max, first_name, last_name, position_title, department_division
            FROM ma_public_employee_salaries
            WHERE year = 2019 AND pay_total_actual > 1
         ) ma_top
    WHERE year = 2019 AND ma.pay_total_actual > 1
    GROUP BY ma_clean.DEPARTMENT_DIVISION_CLEAN;
  SQL

  source_1 = db01.client.query(query_1).to_a

  query_2 = <<~SQL
    SELECT ROUND(AVG(pay_total_actual)) AS avg_all
    FROM ma_public_employee_salaries
    WHERE year = 2019 AND pay_total_actual > 1
  SQL
  source_2 = db01.client.query(query_2).to_a

  db01.client.close

  records = []
  source_1.each_with_index do |el, index|
    table = get_table(el['department_division'])

    record = {
        department_division: el['department_division_clean'], avg: Numbers.money(el['total'].to_f.round).to_s.sub(/\.00$/, ''), org_id: el['org_id'],
        avg_total: Numbers.money(source_2[0]['avg_all'].to_f.round).to_s.sub(/\.00$/, ''), top_employee: Numbers.money(el['top_employee'].to_f.round).to_s.sub(/\.00$/, ''), top_first_name: el['top_first_name'],
        top_last_name: el['top_last_name'], top_position_title: el['top_position_title'],
        table: table
    }
    puts 'index: '
    puts index
    puts record

    records << record
  end

  records
end

def get_table(department_division)
  db01 = Route_noprefix.new(host: DB01, stage_db: 'usa_raw')
  db01.client.query("use #{db01.stage_db}")

  query_3 = <<~SQL
    SELECT ma_employee.first_name, ma_employee.last_name, ma_employee.pay_total_actual
    FROM ma_public_employee_salaries AS ma
      LEFT JOIN (SELECT * FROM ma_public_employee_salaries) ma_employee
      ON ma_employee.department_division = ma.department_division
    WHERE ma.year = 2019 AND ma.pay_total_actual > 1 AND ma.department_division = "#{department_division}"
    GROUP BY ma_employee.first_name, ma_employee.last_name
    ORDER BY ma_employee.pay_total_actual DESC
    LIMIT 100;
  SQL

  source_table = db01.client.query(query_3).to_a.ranking_new!('pay_total_actual')
  db01.client.close

  table = StoryTable.new
  table.header = ['Rank', 'Employee', 'Amount Earned']
  table.content = []

  source_table.each do |row|
    table.content << [row['rank'], row['first_name'] + ' ' + row['last_name'], Numbers.money(row['pay_total_actual'].to_f.round).to_s.sub(/\.00$/, '')]
  end
  p 'department_division: '
  p department_division
  p 'source_table: '
  p table
  table
end
