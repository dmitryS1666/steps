Campaign Finance Donations - Iowa - Committee contributions weekly
https://docs.google.com/document/d/178nS7ZLaR6xd3D8f7MylWSfDKKpx-gXhzPn88gkMNBM/edit

@john.putz
Dev Name: Dmitry S
Story type Name: #868 Campaign Finance Donations - Iowa - Committee contributions weekly
FCD: https://docs.google.com/document/d/1C3mB0uFY_sMxfYqoEETR_NWgfTPxbZ2VhU5L_echX_Q/edit
Sample story:
Period: April - May
Total Count:
Max Project Count by client:
MB -
MM -
Sample:
_____________________________________________________

STAGE TABLE DEFINITION
insert into stage_definition_configurations (tbl, definition) select 'campaign_finance_donations_iowa_committee_contr_w_staging','{"committee_name":"VARCHAR(128)","amount":"varchar(255)","year":"int(4)","week":"varchar(255)","month":"varchar(255)","story_table":"LONGTEXT"}';

#690

STAGE TABLE CREATION
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_definition' --task='create_tbl' --config_id=690 -t

STAGE POPULATION CONFIGURATION
insert into stage_population_configurations(project_name, tbl, definition) select 'Campaign Finance Donations - Iowa - Committee contributions weekly', 'campaign_finance_donations_iowa_committee_contr_w_staging', '{"known_entities":{"project_name":"Campaign Finance Donations - Iowa - Committee contributions weekly"},"resources":{":root":{"host":"db05","db":"loki_storycreator","tbl":"sort_by_once","identifier":"id","mapping":{}}},"stage_derivations":{"source_id":{"method":"as_int","arguments":{"raw_field":"id"}},"staging":{"stage_fields":["EMPTYSET"],"method":"campaign_finance_donations_iowa_committee_contr_w_population","arguments":{}}}}';

population_config_id: #796

STAGE POPULATION:
$ cd ~/Loki/procedures
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-05-14' --threads_count=10
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-05-21' --threads_count=10
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-05-29' --threads_count=10
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-05-07' --threads_count=10
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-04-30' --threads_count=10
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-04-23' --threads_count=10
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-04-16' --threads_count=10
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-04-09' --threads_count=10
bundle exec ruby Loki.rb :hle@hle_router --switch='stage_population' --config_id=796 -t --date='2020-04-02' --threads_count=10


STORY CREATOR CONFIGURATION:
insert into storycreator_configurations (tbl, template, extension, export_arguments) select 'campaign_finance_donations_iowa_committee_contr_w_staging', 'campaign_finance_donations_iowa_committee_contr_w_creation', 'stories', 'where (story_created != 1 or story_created is null) and publication_name is not null and publication_name != ""';

creation_config_id: #679

STORY CREATION COMMAND:
bundle exec ruby Loki.rb :hle@hle_router --switch='story_creation' --config_id=679 -t


STAGING: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=679 --population_config_id=796 --story_section_ids=2 --story_tag_ids=3 --photobuckets='Campaign Contributions' --job_item_name_description='Campaign Finance Donations - Iowa - Committee contributions weekly' -t --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=679 --population_config_id=796 --story_section_ids=16 --story_tag_ids=126 --photobuckets='Campaign Contributions' --job_item_name_description='Campaign Finance Donations - Iowa - Committee contributions weekly' -t --where="stage.client_name like 'MM - %'"

STAGING: EXPORT STORIES
bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' -t -creator='Dmitry Suschinsky' --stage_tbl_org --config_ids=331895



FIRST FEEDBACK
________________________________________
irb ->
load 'Loki.rb'
Hle::Story::Feedback.stories_feedback('511701546,511701553,511701552')

bundle exec ruby Loki.rb :hle_tools@stories_feedback -t --story_pl_ids=511715440,511715414,511715467


!!!!!!!!!!!!!!FCD!!!!!!!!!!!!!!!!!!!!
________________________________________________________________________________________________________________________________________

SCHEDULER:
__________
population_config_id: #796
creation_config_id: #679

tbl: campaign_finance_donations_iowa_committee_contr_w_staging
desc: Campaign Finance Donations - Iowa - Committee contributions weekly

config_id - population_config_id

Up to 2 stories per day, per pub, for up to 180 days
bundle exec ruby Loki.rb :hle@hle_scheduler -t --config_id=796 --limit=2 --start_date='2020-06-01' --total_days_till_end_date=180

__________________________________________________
чтоб проверить шедулер, что он "окейно" отработал:

select publication_name, min(publish_on), max(publish_on), count(*) from 'campaign_finance_donations_iowa_committee_contr_w_staging' group by publication_name;

______________________________________
PRODUCTION: STORY EXPORT CONFIGURATION
см файл ‘annual sources and output’
______________________________________

--where="client_name like 'MM - %'"

РАЗБИВКА ПО КЛИНЕТАМ!!!

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=679 --population_config_id=796 --story_section_ids=2 --story_tag_ids=126 --photobuckets='Campaign Contributions' --job_item_name_description='Campaign Finance Donations - Iowa - Committee contributions weekly' -t --prod --limit_config=1 --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=679 --population_config_id=796 --story_section_ids=16 --story_tag_ids=126 --photobuckets='Campaign Contributions' --job_item_name_description='Campaign Finance Donations - Iowa - Committee contributions weekly' -t --prod --limit_config=1 --where="stage.client_name like 'MM - %'"

______________________________________

select * from story_export_configurations_v2 where tbl = 'campaign_finance_donations_iowa_committee_contr_w_staging' and export_name like '%production%' order by id DESC;

______________________________________
если все ок, то выполняем без --limit_config=1

bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=679 --population_config_id=796 --story_section_ids=2 --story_tag_ids=126 --photobuckets='Campaign Contributions' --job_item_name_description='Campaign Finance Donations - Iowa - Committee contributions weekly' -t --prod --where="client_id = 120"
bundle exec ruby Loki.rb :hle@hle_config_export --creation_config_id=679 --population_config_id=796 --story_section_ids=16 --story_tag_ids=126 --photobuckets='Campaign Contributions' --job_item_name_description='Campaign Finance Donations - Iowa - Committee contributions weekly' -t --prod --where="stage.client_name like 'MM - %'"
_________
повторяем

select * from story_export_configurations_v2 where tbl = 'campaign_finance_donations_iowa_committee_contr_w_staging' and export_name like '%production%' order by id DESC;


______________________
для построения таблицы
______________________

select s.client_name, s.publication_name, s.publication_id as project_id, ec.id as config_id, s.max_publish_on, s.total_stories from (select client_name, publication_name, publication_id, max(publish_on) as max_publish_on, count(*) as total_stories from campaign_finance_donations_iowa_committee_contr_w_staging group by publication_name) s join (select * from story_export_configurations_v2 where tbl ='campaign_finance_donations_iowa_committee_contr_w_staging' and export_name like '%production%') ec on ec.community_id = s.publication_id order by s.publication_name;


__________________________
PRODUCTION: EXPORT STORIES
__________________________

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='327979'

_____
IF OK
_____

--threads_count=7 | 13140961 | 13140960

bundle exec ruby Loki.rb :hle@hle_router --switch='story_export' --prod --stage_tbl_org --creator='Dmitry Suschinsky' -t --hunter=0 --publish_on --published=1 --config_ids='327979,327988,327985,327983,327984,327996,327989,327994,327995,327981,327980,327991,327986,327993,327992,327990,327987,327998,327982,327999,327997'
___________________________


ФИНАЛЬНАЯ ТАБЛИЦА ДЛЯ ДЖОНА
___________________________

SELECT CONVERT(GROUP_CONCAT(job_item_id SEPARATOR ',') USING utf8)
FROM story_export_configurations_v2
WHERE tbl = "campaign_finance_donations_iowa_committee_contr_w_staging" AND
      export_name LIKE '%production%';

# pipeline-core-replica2.jnswire_prod query:

SELECT headline, c.name AS publication, concat('https://pipeline.locallabs.com/stories/', s.id) AS url,
       published_at, ji.name AS job_item, cc.name AS client
FROM stories AS s
JOIN communities AS c
  ON s.community_id = c.id
JOIN client_companies AS cc
  ON c.client_company_id = cc.id
JOIN data_entry_leads AS l
  ON l.id = s.lead_id
JOIN job_items AS ji
  ON l.job_item_id=ji.id
WHERE published_at >= '2020-05-12' AND
      deleted = 0 AND
      l.job_item_id IN (195752,195753,195756,195763,195757,195755,195758,195769,195762,195766,195771,195772,195781,195768,195761,195770,195754,195759,195764,195765,195767)
ORDER BY c.name;




REMINDER TOOL
___________________________

INSERT INTO loki_storycreator.hle_reminders
    (
        story_type_name, story_type_stage_table,
        dev_name, slack_handle, dev_email,
        story_frequency, reminders_on, manual_export_required, reminder_frequency, reminder_message,
        last_manual_export, manual_export_blocked, on_cron, warnings_on, warning_count_min, warning_frequency, warning_fix_blocked,
        data_source_checker_on, data_source_host, data_source_db, data_source_update_query
    )
VALUES
    (
        'Campaign Finance Donations - Iowa - Committee contributions weekly', 'campaign_finance_donations_iowa_committee_contr_w_staging',
        'Dmitiry Suschinsky', '@dmitiry.suschinsky', 'dsuschinsky@gmail.com',
        'quarter', 1, 1, 'quarterly', 'The Dataset located on db12.usa_raw.michigan_professional_licensing%',
        '2020-01-10', 0, 0, 0, 20000, 'quarterly', 0,
         1, 'db12','usa_raw', 'select date(max(postedTime)) date from usa_raw.michigan_professional_licensing;'
    );



# Creator: Dmitry Suschinsky
# Story type: Campaign Finance Donations - Iowa - Committee contributions weekly
# Template: https://docs.google.com/document/d/1zL21sYRjNEsmGoAibrDc_43zXS5oEmFjMhj4pEU3xOo/edit#
# Created: May 2020

# tbl: campaign_finance_donations_iowa_committee_contr_w_staging
# db01.usa_raw.IECDB_iowa_campaign_disclosures_%
# branch: campaign_finance_donations_iowa_committee_contr_w_d_sushi
# campaign_finance_donations_iowa_committee_contr_w.rb.rb

def table_from_data(records)
  table = []
  records.each do |rec|
    table << {
        "Date" => Date.parse(rec['date']).strftime("%m/%d/%Y"),
        "Contributor" => rec['contributor'],
        "Amount" => Numbers.money(rec['amount'])
    }
  end
  table
end

def separate_comma(number)
  if number.to_f.abs > 999
    number.to_f.round.abs.to_s.sub(/\.0$/,'').chars.to_a.reverse.each_slice(3).map(&:join).join(",").reverse
  else
    number.to_f.round(1).abs.to_s.sub(/\.0$/,'')
  end
end

def titleize(str)
  str.split.each(&:capitalize!).join(' ')
end

def get_table_records(data_route, date_start, date_finish, committee_name)
  root_query = "SELECT t2.contributor_name AS contributor, t2.amount, t2.date
                FROM IECDB_iowa_campaign_disclosures_committees t1
                  JOIN (
                    SELECT amount, committee_id, date, contributor_name
                    FROM IECDB_iowa_campaign_disclosures_contributions
                    WHERE date BETWEEN '#{date_start}' AND '#{date_finish}'
                  ) t2 ON t1.id = t2.committee_id
                WHERE cast(amount as unsigned) > 0 AND t1.committee_name = '#{committee_name}'
                ORDER BY cast(amount as unsigned) DESC
                LIMIT 100"
  data_route.client.query(root_query).to_a
end

def get_records(data_route, date_start, date_finish)
  root_query = "SELECT t1.id, ifnull(t1.committee_name_cleaned_manually, t1.committee_name) as committee_name,
                       t2.total_amount, t1.pl_production_org_id AS org_id
                FROM IECDB_iowa_campaign_disclosures_committees t1
                     JOIN (
                        SELECT sum(cast(amount as unsigned)) as total_amount, committee_id
                        FROM IECDB_iowa_campaign_disclosures_contributions
                        WHERE date BETWEEN '#{date_start}' AND '#{date_finish}'
                        GROUP BY committee_id
                    ) t2 ON t1.id = t2.committee_id
                WHERE total_amount > 0 ORDER BY total_amount desc;"
  data_route.client.query(root_query).to_a
end

def prepare_count(val)
  if val.to_i < 10
    Numbers.num_to_words(val)
  else
    val
  end
end

def week_start(date, offset_from_sunday = 0)
  date - (date.wday - offset_from_sunday)%7
end

def campaign_finance_donations_iowa_committee_contr_w_stage_population(line, argument)
  require 'bigdecimal'
  require 'bigdecimal/util'
  require 'date'

  puts("\n!!!\nParameter year required 'date' \n!!!\n") unless (@options['date'])
  return 'INVALID' unless @options['date']
  date = @options['date']
  return 'INVALID' unless date.to_s.match(/^\d{4}-\d{1,2}-\d{1,2}$/)

  date = Date.parse(date)

  next_sunday = week_start(date,0).strftime('%Y-%m-%d')
  next_saturday = Date.parse(next_sunday) + 6

  week_str = "#{next_sunday.to_s} - #{next_saturday.to_s}"
  month_str = "#{next_saturday.strftime("%B")} #{next_saturday.strftime("%-d")}"
  week_period = []

  week_period << next_sunday.to_s
  week_period << next_saturday.to_s

  threads_count = @options['threads_count'].to_i || 3
  year = date.year
  puts 'week_str: ', week_str
  puts 'month_str: ', month_str
  puts 'week_period: ', week_period
  puts 'date: ', date
  puts 'year: ', year

  route = Route_noprefix.new(host: DB01, stage_db: 'usa_raw')
  route.client.query("use #{route.stage_db}")

  data_state = Route_noprefix.new(host: DB05, stage_db: 'loki_storycreator')
  data_state.client.query("use #{data_state.stage_db}")

  records = get_records(route, week_period[0], week_period[1])
  @semaphore = Mutex.new
  threads = Array.new(threads_count) do
    Thread.new do
      delivery = Route_noprefix.new(host: DB05, stage_db: 'loki_storycreator')
      delivery.client.query("use #{delivery.stage_db}")
      data_state_01 = Route_noprefix.new(host: DB01, stage_db: 'usa_raw')
      data_state_01.client.query("use #{data_state_01.stage_db}")

      reasons = {
          publications: [],
          publication_name: []
      }

      loop do
        rec = nil
        @semaphore.synchronize {
          rec = records.pop
        }
        break if rec.class == NilClass

        puts 'rec: ', rec

        unless rec['org_id']
          reasons[:publications] << rec['org_id']
          next
        end

        # Metro Business Network
        # MM-Iowa
        publications = []
        publications << Hle::Publications.mm_pubs_excluding_states(rec['org_id'], 'production', 'Iowa')
        publications << get_journal_from_org_id(rec['org_id'], 'production', 120) rescue nil

        publications.flatten!.uniq!

        if publications.count.zero?
          reasons[:publications] << rec['org_id']
          next
        end

        table_records = get_table_records(data_state_01, week_period[0], week_period[1], rec['committee_name'])
        table = table_from_data(table_records)

        if table.count.zero?
          reasons[:publications] << rec['org_id']
          next
        end

        publications.each do |publication|
          hash = {}

          hash['publication_name'] = publication['publication_name']

          if hash['publication_name'].empty?
            reasons[:publication_name] << publication['id']
            next
          end

          hash['client_name'] = publication['client_name']
          hash['client_id'] = publication['client_id']
          hash['publication_id'] = publication['id'].to_i
          hash['source_table_id'] = 21017
          hash['organization_id'] = rec['org_id']

          hash['week'] = week_str
          hash['month'] = month_str
          hash['year'] = year
          hash['committee_name'] = rec['committee_name']
          hash['amount'] = rec['total_amount']

          hash['story_table'] = table.to_json

          rules = insert_rules(hash.escaped)
          puts "insert into #{@config['target_table']}#{rules}"
          query = "insert into #{@config['target_table']}#{rules}"
          delivery.client.query(query)
          puts hash
        end
        puts 'REASONS: ', reasons
      end

    rescue => e
      print "#{e.to_s} ~> #{e.backtrace.join("\n")}\n"
    ensure
      data_state.client.close if data_state
      data_state_01.client.close if data_state_01
      route.client.close if route
      delivery.client.close
    end
  end
  threads.each(&:join)
  'INVALID'
end

def campaign_finance_donations_iowa_committee_contr_w_stage_creation(options, mail_sender = false)
  i = 0
  count = @stage_selection.count
  @stage_selection.each do |stage|
    i += 1
    p "#{i}/#{count}: "
    export = {}

    committee_name = stage['committee_name']
    month = stage['month']
    amount = stage['amount']

    if committee_name.include? "PAC"
      committee_name_str = "#{committee_name}, a political action committee"
    elsif committee_name.include?("Friends of") || committee_name.include?("friends of") || committee_name.include?("Vote for") || committee_name.include?("vote for")
      committee_name_str = "#{committee_name}, a campaign committee"
    else
      committee_name_str = "#{committee_name}"
    end


    table = JSON.parse(stage['story_table'])
    count = table.count
    str = "Here is the #{Numbers.num_to_words(count)} largest contribution" if count == 1
    str = "Here are the #{Numbers.num_to_words(count)} largest contributions" if count > 1
    table = "#{graph_from_json(table.to_json)}" unless table.eql?([])

    export['headline'] = "Who contributed to #{committee_name} during week ending #{month}"
    export['teaser'] = "#{committee_name_str}, received #{Numbers.money(amount)} during the week ending #{month}."

    output = ''
    output << "#{committee_name_str}, received #{Numbers.money(amount)} during the week ending #{month}.\n\n"
    output << "#{str} that #{committee_name} received during the week ending #{month}, according to Iowa Ethics and Campaign Disclosure Board.\n\n"

    output << table

    export = prepare_output(stage, output, export, options)
  end
end